##############################
# Special stuff
##############################
generic:
  add: 添加
  all: 全部
  and: ' 和 '
  back: 返回
  cancel: 取消
  confirm: 确认
  clear: 清除
  clearAll: 清除全部
  close: 关闭
  comingSoon: 即将上线
  comma: '，'
  copy: 复制
  create: 创建
  created: 创建时间
  customize: 自定义
  dashboard: 仪表板
  default: 默认
  disabled: 禁用
  done: 完成
  enabled: 启用
  here: 此处
  id: ID
  ignored: 忽略
  invalidCron: 无效的 cron 调度
  imagePullPolicy:
    always: 总是
    ifNotPresent: 如果不存在
    never: 从不
  labels: 标签
  labelsAndAnnotations: 标签 & 注释
  podSecurityAdmission: Pod 安全准入
  links: 链接
  loading: 正在加载&hellip;
  members: 成员
  na: N/A
  name: 名称
  never: 从不
  none: 无
  notFound: 未找到
  number: '{prefix}{value, number}{suffix}'
  notification:
    title:
      succeed: 成功
      info: 信息
      warning: 警告
      error: 错误
  ok: OK
  overview: 概述
  plusMore: "+ {n} 更多"
  readFromFile: 从文件读取
  readFromFolder: 从文件夹读取
  reload: 重新加载
  register: 注册
  reset: 重置
  remove: 移除
  addCatalog: 添加应用商店
  resource: |-
    {count, plural,
    one  {资源}
    other {资源}
    }
  resourceCount: |-
    {count, plural,
    one  {1 资源}
    other {# 资源}
    }
  save: 保存
  showAdvanced: 展开高级选项
  hideAdvanced: 隐藏高级选项
  techPreview: 技术预览
  type: 类型
  unknown: 未知
  upload: 上传
  provisioning: '—'
  key: 键
  value: 值
  yes: 是
  no: 否
  units:
    time:
        5s: 5秒
        10s: 10秒
        30s: 30秒
        1m: 1分钟
        5m: 5分钟
        15m: 15分钟
        30m: 30分钟
        1h: 1小时
        2h: 2小时
        6h: 6小时
        1d: 1天
        7d: 7天
        30d: 30天
  completed: 已完成
  enable: 启用
  disable: 禁用
  experimental: 实验功能

  deprecated: 已弃用
  placeholder: "例如：{text}"
  moreInfo: 更多信息
  selectors:
    label: 选择器
    matchingResources:
      matchesSome: |-
        {matched, plural,
          =0 {匹配 {total, number} 个中的 0 个}
          =1 {匹配 {total, number} 个中的 1 个："{sample}"}
          other {匹配 {total, number} 中的 {matched, number} 个，包括 "{sample}"}
        }
  volume:
    title: 卷
    volume: 卷
    addVolume: 添加卷
    storageClass: 存储类

locale:
  en-us: English
  zh-hans: 简体中文
  none: (None)

nav:
  harvesterDashboard: Harvester 仪表板
  backToRancher: Cluster Manager
  clusterTools: 集群工具
  kubeconfig:
    download: 下载 KubeConfig
    copy: 将 KubeConfig 复制到剪切板
    options: KubeConfig 选项
  import: 导入 YAML
  home: 首页
  shell: Kubectl Shell
  shellShortcut: Kubectl Shell {key}
  support: |-
    {hasSupport, select,
      true {支持}
      other {获取支持}
    }
  restoreSnapshot: 还原快照
  rotateEncryptionKeys: 轮换加密密钥
  saveAsRKETemplate: 保存为 RKE 模板
  takeSnapshot: 拍摄快照
  group:
    cluster: 集群
    inUse: 更多资源
    Policy: 策略
    rbac: RBAC
    serviceDiscovery: 服务发现
    starred: 已收藏
    storage: 存储
    workload: 工作负载
    monitoring: 监控
    advanced: 高级选项
    RKE1Configuration: RKE1 配置
    admission: 管理
    apps: 应用
    clusterProvisioning: 集群配置
    core: 核心
    legacy: 旧版
    API: API
    Coordination: 协调
    Discovery: 发现
    Fleet: Fleet
    K3s: K3s
    Networking: 网络
    Rancher: Rancher
    RBAC: RBAC
    Scheduling: 调度
    Storage: 存储
  ns:
    all: 所有命名空间
    clusterLevel: 集群资源
    namespace: "{name}"
    namespaced: 命名空间资源
    orphan: 不在项目内
    project: "项目名称: {name}"
    system: 系统命名空间
    user: 用户命名空间
  apps: 应用
  categories:
    explore: 浏览集群
    multiCluster: 全局应用
    legacy: 旧版应用
    configuration: 配置
    hci: OB
  search:
    placeholder: 输入关键词，搜索集群
    noResults: 没有匹配的集群
  resourceSearch:
    label: 资源搜索
    toolTip: 资源搜索 {key}
    placeholder: 输入关键词，搜索资源
  header:
    setLoginPage: 设置为登录页面
    restoreCards: 恢复隐藏的卡片
  userMenu:
    preferences: 偏好设置
    accountAndKeys: 账号 & API 密钥
    logOut: 登出
  failWhale:
    authMiddleware: 认证中间件
    clusterNotFound: 未找到集群 { clusterId }
    productNotFound: 未找到产品 {productNotFound}
    resourceNotFound: 未找到资源类型 { resource }
    resourceListNotFound: 未找到资源类型 { resource }，无法显示列表
    resourceIdNotFound: 未找到 ID 为 { fqid } 的资源 { resources }，无法显示资源详细信息
    reload: 重新加载
    separator: 或者

product:
  apps: 应用
  auth: 用户 & 认证
  backup: Rancher 备份
  cis: CIS Benchmark
  ecm: Cluster Manager
  explorer: 集群浏览器
  fleet: 持续交付
  longhorn: Longhorn
  manager: 集群管理
  gatekeeper: OPA Gatekeeper
  istio: Istio
  logging: Logging
  settings: 全局设置
  clusterManagement: 集群管理
  monitoring: 监控
  mcapps: 全局配置
  llm: LLM 管理
  rancher: Rancher
  legacy: 旧版
  plugins: 插件

suffix:
  percent: "%"
  milliCpus: milli CPU
  cores: 核
  cpus: CPU
  gpus: GPU
  ib: iB
  mib: MiB
  gb: GB
  revisions: |-
    {count, plural,
      =1 { 版本 }
      other { 版本 }
    }
  seconds: |-
    {count, plural,
      =1 { 秒 }
      other { 秒 }
    }
  sec: 秒
  times: |-
    {count, plural,
      =1 { 次 }
      other { 次 }
    }
  ago: 前

##############################
# Components & Pages
##############################
home:
  title: LLMOS 概览
  glance:
    version: 版本
    created: 创建时间
about:
  title: 简介
  versions:
    title: 版本
    component: 组件
    version: 版本
    cli: CLI
    helm: Helm
    machine: Machine
    LLMOS: LLMOS Operator
    releaseNotes: '查看发行说明'
  os:
    mac: macOS
    windows: Windows
    linux: Linux
  downloadImageList:
    title: 镜像列表
  downloadCLI:
    title: CLI 下载
  diagnostic:
    title: 诊断
    checkboxTooltip: 用前 10 个资源的响应时间补充诊断数据，可能需要一些的时间才能完成。
    checkboxLabel: 发出其它请求
    systemInformation:
      subtitle: 系统信息
      browser: 浏览器
      browserInfo: "用户浏览器：{userAgent}；语言：{language}；是否启用了 Cookies：{cookieEnabled}"
      system: 系统
      jsMemory: Javascript 内存
      deviceMemory: "设备内存：{deviceMemory}"
      hardwareConcurrency: "硬件并发：{hardwareConcurrency}"
      os: "操作系统：{platform}"
      memJsHeapLimit: "堆大小限制：{jsHeapSizeLimit}"
      memTotalJsHeapSize: "总堆大小：{totalJSHeapSize}"
      memUsedJsHeapSize: "已使用的堆大小：{usedJSHeapSize}"
    logs:
      subtitle: 最新日志
    resourceCounts: |-
      {count, plural,
        one { 集群资源数量（{count} 集群）}
        other { 集群资源数量（{count} 集群）}
      }
    modal:
      title: 未生成响应时间。
      body: 生成响应时间以提供更具体的信息。

accountAndKeys:
  title: 账号 & API 密钥
  account:
    title: 账号
    change: 更改密码
  apiKeys:
    title: API 密钥
    notAllowed: 你没有权限管理 API 密钥
    apiEndpoint: "API 端点"
    add:
      description:
        label: 描述
        placeholder: 可选择输入一个描述，以识别此 API 密钥。
      label: 创建 API 密钥
      expiry:
        label: 自动过期
        options:
          never: 从不
          day: 一天后过期
          month: 一个月后过期
          year: 一年后过期
          custom: 自定义
          maximum: "{value} - 最大有效期"
      customExpiry:
        options:
          minute: 分钟
          hour: 小时
          day: 天
          month: 月
          year: 年
      scope: 范围
      noScope: 无范围
    info:
      accessKey: Access Key
      secretKey: Secret Key
      bearerToken: 持有者令牌
      saveWarning: 请善保存以上的信息。这是你唯一查看该信息的机会。如果丢失这些信息，你需要创建一个新的 API 密钥。
      keyCreated: 已创建一个新的 API 密钥。
      bearerTokenTip: "Access Key 和 Secret Key 可以作为 HTTP Basic auth 的用户名和密码发送，从而授权请求。你也可以将它们组合起来作为一个持有者令牌使用。"
      ttlLimitedWarning: 系统配置导致该 API 密钥的到期时间缩短了。

addonConfigConfirmation:
  title: 附加配置重置
  body: 修改 Kubernetes 版本会重置附加配置的值。请先检查这些值是否正确。

assignTo:
  title: |-
    {count, plural,
      =1 { 分配集群到&hellip; }
      other { 分配 {count} 集群到&hellip; }
    }
  labelsTitle: |-
    {count, plural,
      =1 { 分配集群到&hellip; }
      other { 分配 {count} 集群到&hellip; }
    }
  workspace: 工作空间

asyncButton:
  apply:
    action: 应用
    success: 已应用
    waiting: 正在应用&hellip;
  add:
    action: 添加
    success: 已添加
    waiting: 正在添加&hellip;
  continue:
    action: 继续
    success: 已保存
    waiting: 正在保存&hellip;
  copy:
    action: 单击复制
    success: 已复制
  create:
    action: 创建
    success: 创建时间
    waiting: 正在创建&hellip;
  default:
    action: 操作
    error: 错误
    success: 成功
    waiting: 等待中
  delete:
    action: 删除
    success: 已删除
    waiting: 正在删除&hellip;
  disable:
    action: 禁用
    success: 禁用
    waiting: 正在关闭&hellip;
  activate:
    action:  激活
    waiting: 正在激活&hellip;
    success: 已激活
  deactivate:
    action:  停用
    waiting: 正在停用&hellip;
    success: 已停用
  diagnostic:
    action: 下载诊断包
    success: 正在保存
    waiting: 正在下载&hellip;
  done:
    action: 完成
    success: 已保存
    waiting: 正在保存&hellip;
  download:
    action: 下载
    success: 正在保存
    waiting: 正在下载&hellip;
  drain:
    action: 清空
    success: 已清空
    waiting: 正在清空&hellip;
  edit:
    action: 保存
    success: 已保存
    waiting: 正在保存&hellip;
  enable:
    action: 启用
    success: 启用
    waiting: 正在启用&hellip;
  finish:
    action: 完成
    success: 已完成
    waiting: 正在处理&hellip;
  import:
    action: 导入
    success: 已导入
    waiting: 正在导入&hellip;
  install:
    action: 安装
    success: 已安装
    waiting: 正在安装&hellip;
  load:
    action: 加载
    success: 已加载
    waiting: 正在加载&hellip;
  pause:
    action: 暂停编排
    success: 已暂停编排
    waiting: 正在暂停编排
    description: 由于编排已暂停，新的修改不会部署。要部署新修改，请恢复编排。
  refresh:
    action: ''
    actionIcon: 刷新
    error: ''
    errorIcon: 错误
    success: ''
    successIcon: 勾选
    waiting: ''
    waitingIcon: 刷新
  remove:
    action: 移除
    success: 已移除
    waiting: 正在移除&hellip;
  restore:
    action: 还原
    waiting: 正在还原&hellip;
    success: 已还原
  resume:
    action: 恢复编排
    success: 已恢复编排
    waiting: 正在恢复编排
  rollback:
    action: 回滚
    success: 已回滚
    waiting: 正在回滚工作负载
  rotate:
    action: 轮换
    waiting: 正在轮换&hellip;
    success: 已轮换
  run:
    action: 运行
    waiting: 正在运行&hellip;
    success: 已完成
  snapshot:
    action: 立即创建快照
    waiting: 已启动快照&hellip;
    success: 正在创建快照
  timing:
    action: 生成响应时间
    waiting: 正在生成&hellip;
    success: 已生成响应时间
  uninstall:
    action: 卸载
    success: 已卸载
    waiting: 正在卸载&hellip;
  update:
    action: 更新
    success: 已更新
    waiting: 正在更新&hellip;
  upgrade:
    action: 升级
    success: 正在升级
    waiting: 正在启动&hellip;
  generate:
    action: 生成
    success: 已生成
    waiting: 正在生成&hellip;

changePassword:
  title: 更改密码
  cancel: 取消
  deleteKeys:
    label: 删除所有 API 密钥
  changeOnLogin:
    label: 要求用户下次登录时修改密码
  generatePassword:
    label: 为用户生成随机密码
  currentPassword:
    label: 当前使用的密码
  userGen:
    newPassword:
      label: 新密码
    confirmPassword:
      label: 确认新密码
  randomGen:
    generated:
      label: 生成的密码
  newGeneratedPassword: 推荐密码
  errors:
    mismatchedPassword: 前后两次输入的密码不匹配
    failedToChange: 无法修改密码
    failedDeleteKey: 无法删除单个 API 密钥
    failedDeleteKeys: 无法删除多个 API 密钥

chartHeading:
  overview: 概述
  poweredBy: "Powered by:"

cluster:
  addonChart:
    rancher-vsphere-cpi: vSphere CPI 配置
    rancher-vsphere-csi: vSphere CSI 配置
    rke2-calico: Calico 配置
    rke2-calico-crd: Calico 配置
    rke2-canal: Canal 配置
    rke2-cilium: Cilium 配置
    rke2-coredns: CoreDNS 配置
    rke2-ingress-nginx: NGINX Ingress 配置
    rke2-kube-proxy: Kube Proxy 配置
    rke2-metrics-server: Metrics Server 配置
    rke2-multus: Multus 配置
  agentEnvVars:
    label: Agent 环境
    detail: 向 Agent 容器添加额外的环境变量。这在配置 HTTP 代理时是最常用的。
    keyLabel: 变量名
  cloudProvider:
    aws:
      label: Amazon
    azure:
      label: Azure
    external:
      label: External
    gcp:
      label: Google
    rancher-vsphere:
      label: vSphere
      note: '<b>重要</b>：在附加配置标签中配置 vSphere 云提供商和存储提供商选项。'
    harvester:
      label: Harvester
  copyConfig: 将 KubeConfig 复制到剪切板
  copiedConfig: 已将 KubeConfig 复制到剪切板
  custom:
    nodeRole:
      label: 节点角色
      detail: 选择节点在集群中的角色。在集群中，每个角色都需要至少一个节点。
    advanced:
      label: 高级选项
      detail: 对节点注册方式的额外控制。每个注册的节点需要的值，通常都不相同。
      nodeName: 节点名称
      publicIp: 节点公共 IP
      privateIp: 节点私有 IP
      nodeLabel:
        title: 节点标签
        label: 添加标签
    registrationCommand:
      label: 注册命令
      linuxDetail: 在每台要注册的 Linux 主机上运行此命令。
      windowsDetail: 在每台要注册的 Windows 主机中的 PowerShell 上运行此命令。Windows 节点只能充当 worker。
      windowsNotReady: 在用于添加 Windows worker 的注册命令显示之前，集群必须已启动并运行 Linux ETCD，Control Plane，以及 worker 节点。
      windowsWarning: 工作负载 Pod（包括由 Rancher Chart 部署的 Pod）将默认调度到 Linux 和 Windows 节点上。编辑 Chart 中的 NodeSelector 以将它们放置到兼容的节点上。
      windowsDeprecatedForRKE1: RKE1 已弃用 Windows 支持。建议你迁移到 RKE2。
      insecure: "不安全：如果你的服务器具有自签名证书，选择此项以跳过 TLS 验证。"
  credential:
    banner:
      createCredential: |-
        {length, plural,
          =0 {请先创建一个用于与云提供商对话的凭证}
          other {请创建一个新凭证}
        }
    selectExisting:
      label: 选择现有
    select:
      option:
        new: 创建...
        none: 选择凭证
    aws:
      accessKey:
        label: Access Key
        placeholder: 你的 AWS Access Key
      defaultRegion:
        help: 创建集群时使用的默认区域。需要验证此凭证是否有效。
        label: 默认区域
      secretKey:
        label: Secret Key
        placeholder: 你的 AWS Secret Key
    azure:
      clientId:
        label: 客户端 ID
      clientSecret:
        label: 客户端 Secret
      environment:
        label: 环境
      subscriptionId:
        label: 订阅 ID
      tenantId:
        label: 租户 ID
    digitalocean:
      accessToken:
        help: 从 DigitalOcean <a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="noopener noreferrer nofollow">应用 & API</a> 中粘贴个人访问 Token。
        label: 访问 Token
        placeholder: 你的 DigitalOcean API 访问 Token
    label: 云凭证
    linode:
      accessToken:
        help: 从 Linode <a href="https://cloud.linode.com/profile/tokens" target="_blank" rel="noopener noreferrer nofollow">API Tokens</a> 粘贴个人访问 Token。
        label: 访问 Token
        placeholder: 你的 Linode API 访问 Token
    pnap:
      clientIdentifier:
        label: 客户端 ID
        placeholder: 你的客户端 ID
      clientSecret:
        help: 来自 <a href="https://bmc.phoenixnap.com/credentials/" target="_blank" rel="nofollow noreferrer noopener">phoenixNAP BMC Portal</a> API 凭证
        label: 客户端 Secret
        placeholder: 你的客户端 Secret
    name:
      label: 凭证名称
      placeholder: 此凭证的名称（可选）
    s3:
      accessKey:
        label: Access Key
        placeholder: 你的 API Access Key
      defaultRegion:
        label: 默认区域
        placeholder: "可选：要使用的默认区域"
      defaultBucket:
        label: 默认存储桶
        placeholder: "可选：要使用的默认存储桶"
      defaultEndpoint:
        label: 默认端点
        placeholder: "可选：要使用的默认端点"
      defaultFolder:
        label: 默认文件夹
        placeholder: "可选：要使用的默认文件夹"
      defaultEndpointCA:
        label: 默认端点 CA 证书
        placeholder: "可选：用于验证端点的默认 CA 证书"
      defaultSkipSSLVerify:
        label: 接受任何证书（不安全）
      secretKey:
        label: SecretKey
        placeholder: 你的 API Secret Key
    vmwarevsphere:
        server:
          label: vCenter 或 ESXi Server
          placeholder: vcenter.domain.com
        port:
          label: 端口
        username:
          label: 用户名
        password:
          label: 密码
        note: '注意：免费的 ESXi 许可证不支持 API 访问。仅支持具有有效或评估许可证的服务器。'
    gcp:
      authEncodedJson:
        label: Service Account
        placeholder: Service Account 私钥 JSON 文件
        help: |-
          <p>创建一个 <a href="https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts" target="_blank" rel="noopener noreferrer nofollow">Service Account</a> JSON 私钥文件，并在此处提供 JSON 文件。
          需要以下 IAM 角色：</p>
          <ul>
          <li><b>计算引擎</b>：Compute Viewer (roles/compute.viewer)</li>
          <li><b>项目</b>：Viewer (roles/viewer)</li>
          <li><b>Kubernetes 引擎</b>：Kubernetes 引擎管理员 (roles/container.admin)</li>
          <li><b>Service Account</b>：Service Account 用户(roles/iam.serviceAccountUser)</li>
          </ul>
          点击<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam-integration" target="_blank" rel="noopener noreferrer nofollow">此处</a>查看更多角色相关的信息。
    harvester:
      namespace: 命名空间
      cpu: CPU
      memory: 内存
      disk: 磁盘
      image: 镜像
      network:
        title: 网络
        network: 网络
        addNetwork: 添加网络
        networkName: 网络
        macAddress: MAC 地址
        macFormat: 'MAC 地址格式不正确。'
      volume:
        title: 卷
        volume: 卷
        imageVolume: 镜像卷
        addVolume: 添加卷
        addVMImage: 添加虚拟机镜像
        storageClass: 存储类
      sshUser: SSH 用户名
      userData:
        label: 用户数据模板
        title: "用户数据："
      networkData:
        label: 网络数据模板
        title: "网络数据："
      kubeconfigContent:
        label: KubeconfigContent
      placeholder: '命名空间/名称'
      cluster: 导入的 Harvester 集群
      installGuestAgent: 安装访客代理
  description:
    label: 集群描述
    placeholder: 输入可以描述该集群的文本
  harvester:
    importNotice: 导入 Harvester 集群的方式：
    warning:
      label: 这是一个 Harvester 集群 - 请启用 Harvester 功能开关以对其进行管理。
      state: 警告
      cloudProvider:
        incompatible:
          由于当前的 Harvester 版本与所选的 RKE2 Kubernetes 版本不兼容，因此你无法选择 Harvester cloud provider。请单击 <a target="_blank" rel="noopener noreferrer nofollow" href="https://www.suse.com/suse-harvester/support-matrix/all-supported-versions">此处</a>查看支持的 Kubernetes 版本。
    clusterWarning: |-
      还有 {count, plural,
      =1 {1 个 Harvester 集群未显示}
      other { # 个 Harvester 集群未显示}
      }
    registration:
      step1: "1. 前往目标 Harvester UI 的<code>高级设置</code>页面。"
      step2: '2. 找到<code>cluster-registration-url</code>设置项，并点击<code><i class="icon icon-actions" ></i></code> -> <code>编辑设置</code>按钮。'
      step3: "3. 输入以下注册 URL，并点击<code>保存</code>。"
      step4: "注册 URL"
    machinePool:
      cpu:
        placeholder: 例如：2
      memory:
        placeholder: 例如：4
      disk:
        placeholder: 例如：4
      namespace:
        placeholder: 例如：default
      image:
        placeholder: 请选择镜像
      network:
        placeholder: 请选择网络
      sshUser:
        placeholder: 例如：ubuntu
        toolTip: 用于登录选中的操作系统镜像的 SSH 用户名
  haveOneOwner: 至少有一名成员需要具有所有者角色。
  import:
    warningBanner: '不要导入已连接到另一个 Rancher 实例的集群，避免损坏数据。'
    commandInstructions: '在运行支持的 Kubernetes 版本的 Kubernetes 集群上，运行以下 <code>kubectl</code> 命令，以将其导入到 {vendor}：'
    commandInstructionsInsecure: '如果你看到&quot;证书由未知机构签名&quot;的错误，你的 {vendor} 安装了自签名或不受信任的 SSL 证书。你可以运行下面的命令来绕过证书验证：'
    clusterRoleBindingInstructions: '如果你在创建资源时遇到权限错误，你的用户可能没有绑定 <code>cluster-admin</code> 角色。你可以运行这个命令来申请角色：'
    clusterRoleBindingCommand: 'kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user <your username from your kubeconfig>'
  explore: 浏览
  importAction: 导入已有集群
  manageAction: 管理
  kubernetesVersion:
    label: Kubernetes 版本
    current: （当前）
    experimental: （实验功能）
    deprecated: （已弃用）
    deprecatedPatches: 显示已弃用的 Kubernetes 补丁版本
    deprecatedPatchWarning: 建议为每个 Kubernetes 次要版本使用最新的补丁版本，已弃用的补丁版本可能对迁移有用。
  legacyWarning: 旧版功能开关已开启，但是不是所有旧版功能都在 Kubernetes 1.21+ 中支持。
  log:
    connecting: 正在连接
    noData: 没有预设的日志项目
  name:
    label: 集群名称
    placeholder: 独特的集群名称
  machineConfig:
    banner:
      updateInfo: 创建一个池用来更新主机配置
    aws:
      sizeLabel: |-
        {apiName}: {cpu, plural,
        =1 {1 vCPU}
        other {# vCPU}
        } / {memory, number} GiB 内存 / {storageSize, plural,
          =0 {EBS-Only}
          other {{storageSize, number} {storageUnit} {storageType}}
        }
    azure:
      acceleratedNetworking:
        label: 加速网络
      availabilitySet:
        label: 可用性集（非托管）
        description: 可用性集用于让应用程序免受 Azure 数据中心内硬件故障的影响。
      availabilityZone:
        label: 可用区
        description: 可用区用于让应用程序免受 Azure 数据中心全面故障的影响。
        publicIpAndSKUWarning: 可用区要求启用\"静态公共 IP\" 和\"为公共 IP 使用标准 SKU\"。
        publicIpWarning: 可用区要求启用\"静态公共 IP\"。
        standardSKUWarning: 可用区要求启用\"为公共 IP 使用标准 SKU\"。
        managedDisksWarning: 可用区要求启用\"托管磁盘\"。
      dns:
        help: 公共 IP 地址的唯一 DNS 标签。
        label: DNS 标签
      environment:
        label: 环境
      faultDomainCount:
        help: 如果可用性集已创建，将忽略容错域数量。
        label: 容错域数量
      image:
        help: 你需要使用托管磁盘来提供 ARM 资源标识符。
        label: 镜像
      location:
        label: 位置
      managedDisks:
        label: 使用托管磁盘
      managedDisksSize:
        label: 托管磁盘大小
      nsg:
        help: 如果你使用托管的 Rancher 或提供现有的 NSG ，所有使用此模板的节点都会使用提供的 NSG。如果你没有提供 NSG，将为每个节点创建一个 NSG。
        label: 网络安全组（NSG）
      openPort:
        add: 添加端口
        help: 如果你使用现有的 NSG，将忽略开放端口。
        label: 开放端口
      plan:
        label: 购买计划
        placeholder: publisher:product:plan
      privateIp:
        label: 私有 IP 地址
      publicIpOptions:
        header: 公共 IP 选项
        noPublic:
          label: 没有公共 IP
        staticPublicIp:
          label: 静态公共 IP
        standardSKU:
          label: 为公共 IP 使用标准 SKU
      resourceGroup:
        label: 资源组
      sections:
        availabilitySetConfiguration: 可用性集配置
        purchasePlan: 购买计划
        network: 网络
        disks: 磁盘
      size:
        label: 虚拟机大小
        tooltip: 启用加速网络后，并非所有大小都可用。
        supportsAcceleratedNetworking: 支持加速网络的大小
        doesNotSupportAcceleratedNetworking: 没有加速网络的大小
        availabilityWarning: VM 大小在所选区域中不可用。
        regionDoesNotSupportAzs: 所选区域不支持可用区。请选择其他区域或改用可用性集。
        regionSupportsAzsButNotThisSize: 所选区域的可用区不支持该 VM 大小。请选择不同的区域或 VM 大小。
        selectedSizeAcceleratedNetworkingWarning: 所选 VM 大小不支持加速网络。请选择其他 VM 大小或禁用加速网络。
      sshUser:
        label: SSH 用户名
      storageType:
        label: 储存类型
        warning: StandardSSD_LRS 需要托管磁盘。请使用托管磁盘或选择其他存储类型。
      subnet:
        label: 子网
      subnetPrefix:
        label: 子网前缀
      updateDomainCount:
        help: 如果可用性集已创建，将忽略更新域数量。
        label: 更新域数量
      usePrivateIp:
        label: 使用私有 IP
      vnet:
        label: 虚拟网络
        placeholder: '[resourcegroup:]name'
      tags:
        label: 标签
    digitalocean:
      sizeLabel: |-
        {plan, select,
          s {基础： }
          g {通用： }
          gd {通用： }
          c {CPU： }
          m {内存： }
          so {存储： }
          standard {标准： }
          other {}
        }{memoryGb} GB, {vcpus, plural,
          =1 {# vCPU}
          other {# vCPU}
        }, {disk} GB 磁盘 ({value})
      tags:
        label: Droplet 标签
        placeholder: 例如：my_server
    linode:
      typeLabel: |-
        {label}, {vcpus, plural,
          =1 {# vCPU}
          other {# vCPU}
        }, {disk} GB 磁盘 ({value})
    vsphere:
      hostOptions:
        any: 任意
      vAppOptions:
        label: vApp 选项
        description: 选择 OVF 环境属性
        disable: 不使用 vApp
        auto: 使用 vApp 并使用网络协议配置文件配置网络
        manual: 提供自定义 vApp 配置
        restoreType: 还原类型
        transport:
          label: OVF 环境传输
          tooltip: com.vmware.guestInfo 或 ISO
          placeholder: 例如：com.vmware.guestInfo
        protocol:
          label: vApp IP 协议
          tooltip: IPv4 或 IPv6
          placeholder: 例如：IPv4
        allocation:
          label: vApp IP 分配策略
          tooltip: DHCP, 固定, 瞬态，或fixedAllocated
          placeholder: 例如：fixedAllocated
        properties:
          label: vApp 属性
          add: 添加属性
          keyPlaceholder: 例如：guestinfo.interface.0.ip.0.address
          valuePlaceholder: 例如：ip:虚拟机网络，表达式，或字符串
      networks:
        label: 网络
        add: 添加网络
      guestinfo:
        label: guestinfo 配置参数
        add: 添加参数
        keyPlaceholder: 例如：guestinfo.hostname
        valuePlaceholder: 例如：myrancherhost
      creationMethods:
        template: '使用模板部署：数据中心'
        library: '使用模板部署：内容库'
        vm: '克隆现有的虚拟机'
        legacy: '使用 boot2docker ISO 安装（旧版）'
      scheduling:
        label: 调度
        description: 选择虚拟机将被调度到哪个管理程序
        dataCenter: 数据中心
        resourcePool: 资源池
        dataStore: 数据存储
        folder: 文件夹
        host:
          label: 主机
          note: 用于创建虚拟机的主机（如果是独立的 ESXi 或是带有 DRS 的集群，请留空)
      instanceOptions:
        label: 实例选项
        description: 选择虚拟机的大小和操作系统
        cpus: CPU
        memory: 内存
        disk: 磁盘
        creationMethod: 创建方法
        template:
          label: 模板
          none: 未找到模板
        contentLibrary: 内容库
        libraryTemplate: 库模板
        virtualMachine: 虚拟机
        osIsoUrl:
          label: 操作系统 ISO URL
          placeholder: '默认：最新的 rancheros-vmware 镜像'
        cloudInit:
          label: Cloud Init
          placeholder: 例如：http://my_host/cloud-config.yml
          note: Cloud-init 文件 guestinfo 设置的 URL
        cloudConfigYaml: 云配置 YAML
        os: 操作系统
      tags:
        label: 标签
        description: 标签用于向 vSphere 对象清单中的对象添加元数据，以便对对象进行排序和搜索。
        addTag: 添加标签
      customAttributes:
        label: 自定义属性（旧版）
        description: 自定义属性用于向 vSphere 对象清单中的对象添加元数据，以便对对象进行排序和搜索。
        add: 添加自定义属性
    amazonEc2:
      region: 区域
      zone: 区域
      instanceType: 实例类型
      rootSize:
        placeholder: '默认：16'
        label: 根磁盘大小
        suffix: GB
      selectedNetwork:
        label: 'VPC/子网'
        placeholder: 选择一个 VPC 或子网
      iamInstanceProfile:
        label: IAM 实例配置文件名称
        tooltip: Kubernetes 的 AWS 云提供商支持要求使用实例配置文件
      ami:
        label: AMI ID
        placeholder: '默认：近版 Ubuntu LTS'
      sshUser:
        label: 用于 AMI 的 SSH 用户名
        placeholder: '默认：ubuntu'
        tooltip: '所选 AMI 中的用户名。此用户名将用于 SSH 到这个节点。'
      securityGroup:
        title: 安全组
        vpcId: '（先选择一个 VPC/子网）'
        mode:
          default: '标准：自动创建并使用一个 "{defaultGroup}" 安全组'
          custom: '选择一个或多个现有的安全组：'
      volumeType:
        label: EBS 根卷类型
        placeholder: '默认：gp2'
      encryptEbsVolume: 加密 EBS 卷
      kmsKey:
        label: KMS 密钥 ARN
        text: '没有权限列出 KMS 密钥。如果你知道密钥 ARN，你可以输入密钥 ARN。'
      requestSpotInstance: 请求 Spot 实例
      spotPrice:
        label: Spot 价格
        placeholder: '默认：0.50'
        suffix: 每小时单价（美元）
      privateAddressOnly: 仅使用私有地址
      useEbsOptimizedInstance: EBS 优化实例
      httpEndpoint: 允许访问 EC2 元数据
      httpTokens: 为元数据使用 Token
      tagTitle: EC2 标签
    pnap:
      serverLocation:
        label: 位置
      serverType:
        label: 类型
      serverCpu:
        label: CPU
      serverCoresPerCpu:
        label: 每个 CPU 的核心数
      serverCpuCount:
        label: CPU 数量
      serverCpuFrequency:
        label: CPU 频率 [GHz]
      serverRam:
        label: RAM [GB]
      serverStorage:
        label: 存储
      serverNetwork:
        label: 网络
      serverOs:
        label: 操作系统
  addOns:
    dependencyBanner: 附加组件配置可能因 Kubernetes 版本而异。更改 Kubernetes 版本可能会重置以下值。
    additionalManifest:
      title: 其它清单文件
      tooltip: '集群启动时要应用的其它 Kubernetes 清单 YAML'
  agentConfig:
    tabs:
      cluster: Cluster Agent
      fleet: Fleet Agent
    groups:
      deploymentLabels: 部署标签
      selector: 选择器
      podAffinity: 亲和性
      podTolerations: 容忍度
      podRequestsAndLimits: 请求和限制
    subGroups:
      podAffinityAnti: Pod 亲和性/反亲和性
      nodeAffinity: 节点亲和性
    banners:
      advanced: 以下是高级配置，通常不修改。
      tolerations: 其他 Pod 容忍度将添加到 Rancher 应用的默认容忍度中。
      limits: Pod 请求和限制没有默认配置。
      windowsCompatibility: "不建议删除用于阻止 <b>Agent</b> 在 Windows 节点上运行的节点亲和性规则，因为这不是受支持的配置。"
    affinity:
      default: 使用 Rancher 定义的默认亲和性规则
      custom: 使用自定义亲和性规则
  advanced:
    argInfo:
      title: 补充 Kubelet 参数
      machineSelector:
        label: 添加主机选择器
        listLabel: 添加参数
        bannerLabel: '注意：优先匹配最后一个的选择器，并且只使用它的参数。匹配到的其他选择器的参数不会合并。'
        title: '标签匹配的主机：'
        subTitle: '使用 Kubelet 参数：'
        titleAlt:  |-
          {count, plural,
            =1 { 所有主机均使用 Kubelet 参数： }
            other { 任何主机均使用 Kubelet 参数： }
          }
        kubeControllerManagerTitle: 补充的 Controller Manager 参数
        kubeApiServerTitle: 补充的 API server 参数
        kubeSchedulerTitle: 补充的 Scheduler 参数
    agentArgs:
      label: 如果内核参数与预期的 Kubelet 默认值不同，则抛出错误。
  banner:
    warning: '此集群包含此表单不完全支持的 machineSelectorConfig。使用 YAML 编辑器管理完整配置。'
    os: '你正在将 {newOS} worker 节点添加到具有一个或多个 {existingOS} worker 节点的集群。你可能需要升级或删除某些已安装的应用。'
    rke2-k3-reprovisioning: '更改集群配置可能导致节点重新配置。详情请参见 <a target="blank" href="{docsBase}/cluster-provisioning/rke-clusters/behavior-differences-between-rke1-and-rke2/" target="_blank" rel="noopener nofollow">文档</a>。'
    desiredNodeGroupWarning: 没有可用于运行 Cluster Agent 的节点。要让集群变为 Active 状态，至少需要有 1 个可用的节点。
    haveArgInfo: 所选 Kubernetes 版本的配置信息不可用。此屏幕中可用的选项将受到限制，你可能需要使用 YAML 编辑器。
  rkeTemplateUpgrade: 模板修订版 {name} 可用于升级

  availabilityWarnings:
    node: 节点 {name} 处于非活动状态
    machine: 主机 {name} 处于非活动状态

  detail:
    provisioner: 提供商
    kubernetesVersion: Kubernetes 版本
    machineProvider: 主机提供商
    machinePools: 主机池
    machines: 主机
    rkeTemplate: RKE 模板

  machinePool:
    name:
      label: 池名称
      placeholder: 默认会随机生成一个名称
    nodeTotals:
      label:
        controlPlane: '{count} 个 Control Plane 节点'
        etcd: '{count} 个 ETCD 节点'
        worker: '{count} 个 worker 节点'
      tooltip:
        controlPlane: |-
          {count, plural,
            =0 { 一个集群需要至少 1 个可用的 Control Plane 节点。}
            =1 { 只有 1 个 Control Plane 节点的集群是不具备容错能力的。}
            other {}
          }
        etcd: |-
          {count, plural,
            =0 { 一个集群需要至少 1 个可用的 ETCD 节点。}
            =1 { 只有 1 个 ETCD 节点的集群是不具备容错能力的。}
            =2 { 集群的节点数需要是奇数。只有 2 个 ETCD 节点的集群是不具备容错能力的。}
            =3 {}
            =4 { 集群的节点数需要是奇数。}
            =5 {}
            =6 { 集群的节点数需要是奇数。}
            =7 {}
            other { 不建议创建多于 7 个ETCD 节点。}
          }
        worker: |-
          {count, plural,
            =0 { 一个集群需要至少 1 个可用的 Worker 节点。}
            =1 { 只有 1 个 Worker 节点的集群是不具备容错能力的。}
            other {}
          }
    quantity:
      label: 主机数量
    drain:
      header: 清空
      label: 删除前清空
    role:
      label: 角色
      etcd: ETCD
      controlPlane: Control Plane
      worker: Worker
    labels:
      label: Kubernetes 节点标签
    noAccessBanner: "你没有查看此主机池配置的权限。"
    configNotFound: "找不到这个主机池的配置。建议你创建一个具有所需配置的新集群。"
    noPoolsDisclaimer: 你没有定义任何主机池，请单击加号进行添加。
    truncationPool: "已手动将此主机池的主机名截断配置为 {limit}"
    truncationCluster: "已手动将此集群的主机名截断配置为 {limit}"

    autoReplace:
      label: 自动替换
      toolTip: 如果大于 0，则在此期间无法访问的节点将被自动删除和替换。
      unit: "秒"
  managementTimeout: 集群变成可用。可能已创建了集群。建议在创建另一个集群之前检查集群页面。
  memberRoles:
    removeMessage: '注意：删除用户不会删除其项目权限。'
    addClusterMember:
      labelSelect: 选择成员
      labelAdd: 添加成员
      placeholder: 搜索成员以提供集群访问权限
      searchPlaceholder: 请输入搜索
      noResults: 没有匹配的结果
  privateRegistry:
    label: 为 Rancher 系统容器镜像启用集群级别的容器镜像仓库
    description: "如果启用，Rancher 将在集群配置期间从该镜像仓库中拉取容器镜像。默认情况下，Rancher 在安装 Rancher 的官方 Helm Chart 应用程序时也会使用此镜像仓库。如果集群级别的镜像仓库被禁用，将从全局设置中的系统默认镜像仓库中拉取系统镜像。"
    docsLinkRke2: "如需配置私有镜像仓库 mirror 的帮助，请参阅 RKE2 <a href=\"https://docs.rke2.io/install/containerd_registry_configuration/\" target=\"_blank\">文档</a>。"
    docsLinkK3s: "如需配置私有镜像仓库 mirror 的帮助，请参阅 K3s <a href=\"https://docs.k3s.io/installation/private-registry\" target=\"_blank\">文档</a>。"
  provider:
    aliyunecs: Aliyun ECS
    aliyunkubernetescontainerservice: Alibaba ACK
    aliyun:  Alibaba ACK
    amazonec2: Amazon EC2
    amazoneks: Amazon EKS
    aws: Amazon
    azure: Azure
    azureaks: Azure AKS
    aks: Azure AKS
    azurekubernetesservice: Azure AKS
    baiducloudcontainerengine: 百度 CCE
    baidu: 百度 CCE
    cloudca: Cloud.ca
    cloudscale: Cloudscale
    custom: 自定义
    digitalocean: DigitalOcean
    docker: Docker
    eks: Amazon EKS
    exoscale: Exoscale
    gcp: Google
    google: Google GCE
    googlegke: Google GKE
    gke: Google GKE
    harvester: Harvester
    huaweicce: 华为 CCE
    import: 通用
    imported: 已导入
    k3s: K3s
    kubeAdmin: KubeADM
    linode: Linode
    linodelke: Linode LKE
    local: 本地
    minikube: Minikube
    oci: Oracle OCI
    openstack: OpenStack
    opentelekomcloudcontainerengine: Open Telekom Cloud CCE
    otccce: Open Telekom Cloud CCE
    oracle: Oracle
    oracleoke: Oracle OKE
    otc: Open Telekom Cloud
    other: 其他
    packet: Equinix Metal
    pinganyunecs: 平安云 ECS
    pnap: phoenixNAP
    rackspace: RackSpace
    rancherkubernetesengine: RKE
    rke2: RKE2
    rke: RKE1
    rkeWindows: Windows（仅限 RKE1）
    s3: S3 兼容
    softlayer: IBM 云
    tencenttke: 腾讯云 TKE
    upcloud: UpCloud
    vmwarevsphere: VMware vSphere
    zstack: ZStack
    machineinventoryselectortemplate: Elemental 集群
  providerTag:
    rke2:
      harvester: '{tag}'
  providerGroup:
    create-custom1: 使用现有节点并使用 RKE 创建集群
    create-custom2: 使用现有节点并使用 RKE2/K3s 创建集群
    create-kontainer: 在托管的 Kubernetes 提供商中创建集群
    register-kontainer: 在托管的 Kubernetes 提供商中注册现有集群
    create-rke1: 创建新节点并使用 RKE 创建集群
    create-rke2: 创建节点并使用 RKE2/K3s 创建集群
    create-template: 使用 Catalog 模板创建集群
    register-custom: 导入任意 Kubernetes 集群
  rke2:
    banner:
      psaChange: PSACT 现在自动设置为 Rancher 默认值
      cisOverride: 更改此设置可能会影响集群安全，因为它会覆盖默认的 CIS 设置
      cisUnsupported: 所选 Kubernetes 版本不再支持 CIS 配置文件 “{cisProfile}”，请选择支持的配置文件。建议你查看<a href="https://docs.rke2.io/security/hardening_guide" target="_blank" rel="noopener noreferrer nofollow">文档</a>评估更改 CIS 配置文件的影响。
    snapshots:
      suffix: 每个节点的快照
    systemService:
      rke2-coredns: 'CoreDNS'
      rke2-ingress-nginx: 'NGINX Ingress'
      rke2-kube-proxy: 'Kube Proxy'
      rke2-metrics-server: 'Metrics Server'
      header: 系统服务
    cni:
      label: 容器网络
    cloudProvider:
      label: 云提供商
      header: 云提供商配置
      defaultValue:
        label: 默认 - 嵌入 RKE2
    security:
      header: 安全
    cis:
      server: Server CIS 配置文件
      agent: CIS 配置文件
      override: 当使用 CIS 配置文件时，允许覆盖默认 PSA 配置模板
    defaultPodSecurityPolicyTemplateName:
      label: 默认 Pod 安全策略
      option: 默认 - 嵌入 RKE2
    defaultPodSecurityAdmissionConfigurationTemplateName:
      label: PSA 配置模板
      option:
        none: (None)
        default: 默认 - 嵌入 RKE2
    cisProfile:
      option: (None)
    enableNetworkPolicy:
      label: 项目网络隔离
      warning: 默认情况下，Ingress Controller 无法将请求路由到其他节点上的 Pod。
    workNode:
      label: Worker 节点
    controlPlaneConcurrency:
      label: Control Plane 并发
      toolTip: "可以是固定的节点数（如 1），也可以是百分比（如 10%）"
    workerConcurrency:
      label: Worker 并发
      toolTip: "可以是固定的节点数（如 1），也可以是百分比（如 10%）"
    drain:
      label: 清空节点
      toolTip: 清空操作预先移除每个节点上的 Pod，使得升级中的节点上没有运行的工作负载。不清空的升级速度更快，造成的混乱更少，但是 Pod 仍可能根据进行中的升级进行重启。
    deleteEmptyDir: "默认情况下，使用 emptyDir 卷的 pod 会在升级时被删除。在 pod 生命周期中依赖于 emptyDir 持久卷的操作可能会受到影响。"
    truncateHostnames: 将主机名截断为 15 个字符来兼容 NetBIOS。
    address:
      tooltip: 创建集群后无法更改集群网络值。
      header: 寻址
      clusterCidr:
        label: 集群 CIDR
      serviceCidr:
        label: 服务 CIDR
      dns:
        label: 集群 DNS
      domain:
        label: 集群域名
      nodePortRange:
        label: Node Port Service 端口范围
      tlsSan:
        label: TLS 可选名称
      fqdn:
        toolTip: FQDN 将解析为集群的健康 Control Plane 节点。
      caCerts:
        label: CA 证书
        toolTip: 客户端用于验证端点返回的证书是否有效的证书。
      ipv6:
        warning: 你正在使用 IPv6 CIDR。你可能需要额外配置主机驱动。
        enable: 启用 IPv6 支持
    etcd:
      disableSnapshots:
        label: 自动快照
      snapshotScheduleCron:
        label: Cron 调度
      snapshotRetention:
        label: 保留最后一个
      exportMetric:
        label: 指标
        false: 仅在集群内可用
        true: 暴露给公共接口
  k3s:
    systemService:
      coredns: 'CoreDNS'
      local-storage: '本地存储'
      metrics-server: 'Metrics Server'
      servicelb: 'Klipper 服务 LB'
      traefik: 'Traefik Ingress'
  selectCredential:
    genericDescription: "{vendor} 没有此驱动的内置支持。请查阅驱动的官方文档，以了解身份认证所需的字段。"
  snapshot:
    successTitle: 快照已开始
    errorTitle: "快照 {name} 出错"
    successMessage: "已为 {name} 请求快照"
    bulkSuccessTitle: 快照已开始
    bulkSuccessMessage: |-
      {count, plural,
        =1 { 已为1个集群请求快照 }
        other {已为{count}个集群请求快照}
      }
    groupLabel: 位置
    failed: "{time} 后的快照已失败"
    rke1:
      local: 本地
      s3: s3
  tabs:
    ace: 授权端点
    addons: 附加配置
    advanced: 高级选项
    agentEnv: Agent 环境变量
    basic: 基本信息
    cluster: 集群配置
    etcd: ETCD
    log: 配置日志
    networking: 网络
    machinePools: 主机池
    machines: 主机
    memberRoles: 成员角色
    registry: 镜像仓库
    upgrade: 升级策略
    registration: 注册
  toggle:
    v1: RKE1
    v2: RKE2/K3s
  validation:
    iamInstanceProfileName: 如果选择了 Amazon 云提供商，则必须为每个主机池定义“IAM 实例配置文件名称”。

clusterIndexPage:
  hardwareResourceGauge:
    consumption: "{total} {units} {suffix} 中的 {useful}"
    cores: CPU
    pods: Pod
    ram: 内存
    used: 已使用
    reserved: 已预留
    units:
      cores: |-
        {count, plural,
        =1 {核}
        other {核}}
  header: 集群仪表板
  resourceGauge:
    totalResources: 资源总额
  sections:
    capacity:
      label: 容量
    events:
      label: 事件
      resource:
        label: 资源
      date:
        label: 日期
    alerts:
      label: 告警
    clusterMetrics:
      label: 集群指标
    etcdMetrics:
      label: ETCD 指标
    k8sMetrics:
      label: Kubernetes 组件指标
    gatekeeper:
      buttonText: 配置 OPA Gatekeeper
      disabled: 未配置 OPA Gatekeeper
      label: 违反 OPA Gatekeeper 的限制规定
      noRows: 所有的 OPA Gatekeeper 限制都符合规定
    nodes:
      label: 不健康节点
      noRows: 所有节点都处于健康状态
    componentStatus:
      etcd: Etcd
      scheduler: 调度器
      controller-manager: Controller Manager
      storage: 存储

configmap:
  tabs:
    data:
      label: 数据
      protip: 请在此处输入 UTF-8 文本数据
    binaryData:
      label: 二进制数据

containerResourceLimit:
  cpuPlaceholder: 例如：1000
  gpuPlaceholder: 例如：1
  helpText: 配置容器可以使用的默认资源配额
  helpTextDetail: 容器可以使用的的默认资源配额
  label: 容器默认资源限制
  limitsCpu: CPU 限制
  limitsGpu: NVIDIA GPU 限制/预留
  limitsMemory: 内存限制
  memPlaceholder: 例如：128
  requestsCpu: CPU 预留
  requestsMemory: 内存预留

resource:
  errors:
    update: "更新 {name} 出错"

cruResource:
  backToForm: 返回表单编辑
  backBody: 返回表单编辑不会保留对 YAML 做出的所有更改
  cancelBody: 返回表单编辑不会保留对 YAML 做出的所有更改
  confirmBack: "确认"
  confirmCancel: "确认"
  reviewForm: "继续编辑 YAML"
  reviewYaml: "继续编辑 YAML"
  previewYaml: 以 YAML 文件编辑
  showYaml: 以 YAML 形式查看

detailText:
  collapse: 隐藏
  binary: '<二进制数据: {n, number} 字节>'
  empty: '<空白>'
  unsupported: '<UI 不支持该值，请查看 YAML>'
  plusMore: |-
    {n, plural,
      =1 {+ 1个字符}
      other {+ {n, number}个字符}
    }

drainNode:
  action: '清空'
  actionStop: '停止清空'
  titleOne: 清空 {name}
  titleMultiple: '清空 {count} 个节点'
  deleteLocalData: 删除空目录数据
  force: 强制
  safe:
    label: 安全
    helpText: 如果一个节点有独立的 Pod 或临时数据，它将被封锁，但不会被清空。
  gracePeriod:
    title: Pod 终止的宽限期
    default: 使用 Pod 本身的默认值
    placeholder: 例如：30
    custom: "忽略默认值，每个 Pod 为："
  timeout:
    title: "清空超时"
    default: 超时后继续尝试清空
    placeholder: 例如：60
    custom: "超时后放弃清空："

etcdInfoBanner:
  hasLeader: "ETCD 有一个 Leader："
  leaderChanges: "Leader 变化的次数："
  failedProposals: "失败的 proposal 数量："

footer:
  cnforums: 中文社区
  docs: Rancher 官方文档
  download: 下载 CLI
  forums: 论坛
  issue: 提交 GitHub Issue
  slack: Slack 讨论群
  discord: Discord 讨论群
  wechat:
    title: 微信
    modalText: 扫描二维码添加 Rancher 小助手
    modalText2: 加入 Rancher 官方微信群

glance:
  created: 创建时间
  cpu: CPU 使用量
  memory: 内存
  nodes:
    total:
      label: |-
        {count, plural,
          =1 { 节点 }
          other { 总节点 }
        }
  pods: Pod
  provider: 提供商
  version: Kubernetes 版本
  monitoringDashboard: 监控仪表板
  installMonitoring: 安装 Monitoring
  v1MonitoringInstalled: 已安装 Monitoring V1
  clusterInfo: 集群信息
  eventsTable: 完整事件列表

clusterBadge:
  addLabel: 添加集群徽章
  editLabel: 编辑集群徽章
  modal:
    title: 自定义集群徽章
    checkbox: 显示此集群的徽章
    description: 自定义说明
    iconText: 图标文本
    buttonAction: 应用
    badgeBgColor: 徽章背景颜色
    badgeTextColor: 徽章文字颜色
    badgeAsIcon: 自定义集群图标
    maxCharsTooltip: 最多两个字符
    previewTitle: "集群图标和名称效果"

grafanaDashboard:
  failedToLoad: 加载图表失败
  reload: 重新加载
  grafana: Grafana

graphOptions:
  detail: 详情
  summary: 概述
  refresh: 刷新
  range: 范围

growl:
  clearAll: 清除全部通知
  disconnectError:
    message: "与 {url} 的连接在 {time} 意外断开，重连 {tries} 次后断开连接。请检查你的网络连接并重新加载页面。"
    title: Websocket 断开连接
  connectError:
    message: "与 {url} 的连接在 {time} 意外断开，重连次数为 #{tries}。"
    title: Websocket 重新连接
  reconnected:
    message: "在尝试第 #{tries} 次时恢复了与 {url} 的连接。"
    title: Websocket 已重新连接
  podSecurity:
    message: "创建此 Pod 将违反命名空间的现有限制策略"
    title: PodSecurity 违规

hpa:
  detail:
    currentMetrics:
      header: 当前指标
      noMetrics: 没有当前指标
    metricHeader: '{source} 指标'
  metricIdentifier:
    name:
      label: 指标名称
      placeholder: 例如：packets-per-second
    selector:
      label: 添加选择器
  metricTarget:
    averageVal:
      label: 平均值
    quantity:
      label: 数量
    type:
      label: 类型
    utilization:
      label: 平均利用率
    value:
      label: 值
  metrics:
    headers:
      metricName: 名称
      objectKind: 对象类型
      objectName: 对象名称
      quantity: 数量
      resource: 资源名称
      targetName: 目标名称
      value: 值
    source: 源
  objectReference:
    api:
      label: 引用的 API 版本
      placeholder: 例如：apps/v1beta1
    kind:
      label: 引用类型
      placeholder: 例如：Deployment
    name:
      label: 引用名称
      placeholder: 例如：php-apache
  scaleDownRules:
    label: 缩减行为
    enable: 配置缩减行为
  scaleUpRules:
    label: 扩展行为
    enable: 配置扩展行为
  scalingRule:
    policyHeader: 策略
    addPolicy: 添加策略
    selectPolicy: 选择策略
    selectPolicyTooltip: 选择具有最大值、最小值或禁用缩放的策略。
    stabilizationWindowSeconds: 稳定窗口秒数
    stabilizationWindowSecondsTooltip: 在扩展或缩减时应考虑过去建议的秒数。
    policy:
      type: 类型
      typeTooltip: 根据要扩展的 Pod 数量或要扩展的当前副本百分比设置策略。
      value: 值
      valueTooltip: 策略允许的变更数量。
      periodSeconds: 周期秒数
      periodSecondsTooltip: 策略生效的时间窗口。
  tabs:
    labels: 标签
    metrics: 指标
    target: 目标
    workload: 工作负载
    behavior: 行为
  types:
    cpu: CPU
    memory: 内存
  warnings:
    custom: 为了使用 HPA 的自定义指标，你需要部署自定义 Metrics Server，如 Prometheus 适配器。
    external: 为了使用 HPA 的外部指标，你需要部署外部 Metrics Server，如 Prometheus 适配器。
    noMetric: 为了使用 HPA 的资源指标，你需要部署 Metrics Server。
    resource: 选定的目标引用在规格上没有正确的资源请求。因此，HPA 指标将不会生效。
  workloadTab:
    current: 当前副本数
    last: 上次扩缩容时间
    max: 最大副本数
    min: 最小副本数
    targetReference: 目标引用

import:
  title: 导入 YAML
  defaultNamespace:
    label: 默认命名空间
  success: |-
    已应用 {count, plural,
    =1 {1个资源}
    other {#个资源}
    }

ingress:
  description: Ingress 根据请求中指定的主机名和路径将互联网的传入流量路由到集群内的 Service。你可以在同一个外部 IP 地址和端口上公开多个 Service。
  certificates:
    addCertificate: 添加证书
    addHost: 添加主机
    certificate:
      label: 证书 - 密文名称
      doesntExist: 所选证书不存在
    defaultCertLabel: 默认 Ingress Controller 证书
    headers:
      certificate: 证书
      hosts: 主机
    host:
      label: 主机
      placeholder: 例如：example.com
    label: 证书
    removeHost: 移除
  defaultBackend:
    label: 默认后端
    noServiceSelected: 没有配置默认后端。
    port:
      label: 端口
      placeholder: 例如：80 或 http
      notInt: 端口必须是整数
      required: 端口是必填的
    targetService:
      label: 目标服务
      doesntExist: 你选择的服务不存在
      required: 目标服务是必填的
    warning: "警告：默认后端将全局用于整个集群"
  ingressClass:
    label: IngressClass
  rules:
    addPath: 添加路径
    addRule: 添加规则
    headers:
      pathType: 路径类型
      path: 路径
      port: 端口
      target: 目标服务
      certificates: 证书
    hostname: 主机名
    path:
      label: 路径
      placeholder: 例如：/foo
    port:
      label: 端口
      placeholder: 例如：80 或 http
    removePath: 移除
    requestHost:
      label: 请求主机
      placeholder: 例如：example.com
    target:
      label: 目标服务
      tooltip: 如果此下拉列表中的 Service 均未选择你要公开的 Pod，那么你需要先创建一个选择这些 Pod 的 Service。
      doesntExist: 你选择的服务不存在
    title: 规则
  rulesAndCertificates:
    title: 规则和证书
    defaultCertificate: 默认
  target:
    default: 默认
  rulesOrBackendSpecified: 必须指定默认后端或规则

internalExternalIP:
  none: 无

istio:
  links:
    kiali:
      label: Kiali
      description: '服务网格中的可视化服务及其连接方式。要想让 Kiali 显示数据，你需要安装 Prometheus。如果你需要监控解决方案，请安装 <a tabindex="0" href="{link}">{vendor} Monitoring</a>。'
    jaeger:
      label: Jaeger
      description: 监控并排除基于微服务的分布式系统的故障。
    disabled: '没有安装 {app} 应用。'
  cni: 启用 CNI
  customOverlayFile:
    label: 自定义覆盖文件
    tip: '<a target="_blank" rel="noopener noreferrer nofollow" href="https://istio.io/latest/docs/setup/additional-setup/customize-installation/#patching-the-output-manifest">覆盖文件</a>支持在基本的 {vendor} Istio 安装之上进行额外的配置。你可以利用 <a href="https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/" target="_blank" rel="noopener noreferrer nofollow" >IstioOperator API</a> 对所有组件进行更改和添加，并通过此覆盖 YAML 文件应用这些更改。'
  description: '{vendor} Istio Helm Chart 为你安装了一个最小 Istio 配置，以便你进行应用集成。如果你需要获得有关 Istio 的更多信息，请访问<a target="_blank" href="https://istio.io/latest/docs/concepts/what-is-istio" rel="noopener noreferrer nofollow"> What Is Istio</a>'
  destinationRule:
    title:
      new: 添加目标规则
      edit: 编辑目标规则
      view: "目标规则：{name}"
    port:
      label: 端口
      placeholder: 例如：8080 或 myport
    host:
      label: 输入主机
      error: 主机是必填项。
    name:
      placeholder: 例如：myrule
    loadBalancer:
      title: Load Balancer
      label: 算法
      detail: 配置 Load Balancer 算法
      simple:
        label: 使用标准负载均衡算法
        roundRobin:
          label: 轮询策略
        leastConn:
          label: 最小连接数 Load Balancer
        random:
          label: 随机 Load Balancer
        passthrough:
          label: 透传
      consistentHash:
        label: 使用一致并基于哈希的负载均衡，实现软会话保持
        httpHeaderName:
          label: HTTP 头部名称
          placeholder: 例如：end-user
          error: HTTP 头部名称是必填项。
        minimumRingSize:
          label: 最小环大小
          placeholder: 例如：1024
        httpCookie:
          name:
            label: Cookie 名称
            placeholder: 例如：username
            error: Cookie 名称是必填项。
          path:
            label: Cookie 路径
            placeholder: 例如：/
          ttl:
            label: TTL
            placeholder: 例如：0s
            error: TTL 是必填项。
        mode:
          label: 哈希模式
          header:
            label: 基于特定 HTTP 头部的哈希
          cookie:
            label: 基于 HTTP Cookie 的哈希
          sourceIp:
            label: 基于源 IP 地址的哈希
    connectionPool:
      label: 连接池
      detail: 配置与上游服务的连接量
      http1MaxPendingRequests:
        label: HTTP1 最大待处理请求数
        placeholder: 例如：1024
        help: 到目标的最大待处理 HTTP 请求数。
      http2MaxRequests:
        label: HTTP2 最大请求数
        placeholder: 例如：1024
        help: 到后端的最大请求数。
      maxRequestsPerConnection:
        label: 每个连接的最大 HTTP 请求数
        placeholder: 例如：10
        help: 每个连接到后端的最大请求数。如果此参数设为1，Keep Alive 将被禁用。
      maxRetries:
        label: HTTP 最大重试次数
        placeholder: 例如：1024
        help: 在规定时间内，到集群中所有主机的允许未完成的最大重试次数。
      connectTimeout:
        label: TCP 连接超时
        placeholder: 例如：30ms
        help: TCP 连接超时。
      maxConnections:
        label: TCP 最大连接数
        placeholder: 例如：1024
        help: 到目标主机的最大 HTTP1 /TCP 连接数。
    outlierDetection:
      label: 异常点检测
      detail: 负载均衡池中不健康主机的驱逐配置
      baseEjectionTime:
        label: 基础驱逐时间
        placeholder: 例如：30s
        help: 最短驱逐时长。主机被驱逐的时间，基于其最短驱逐时长，及其已被驱逐的次数。
      consecutiveErrors:
        label: 连续错误
        placeholder: 例如：5
        help: 主机被驱逐出连接池前的错误数。
      interval:
        label: 间隔
        placeholder: 例如：10s
        help: 驱逐清除分析的时间间隔。
      maxEjectionPercent:
        label: 最大驱逐百分比
        placeholder: 例如：10
        help: 可以驱逐的上游服务，在负载均衡池中的最大主机百分比。
    subsets:
      label: 子集
      noSubsets: 无子集
      addSubsetLabel: 添加子集
      removeSubsetLabel: 移除子集
      name:
        label: 名称
        placeholder: 例如：v1
        error: 子集名称是必填项。
      labels:
        error: 请为子集输入至少一个标签。
    tls:
      label: TLS
      detail: 上游服务连接的 TLS 设置
      mode:
        label: TLS 模式
        none:
          label: 无
        istio:
          label: 双向 Istio - 使用 Istio 双向 TLS 认证安全连接到上游
        disable:
          label: 关闭 - 不设置与上游端点的 TLS 连接
        simple:
          label: 简单 - 发起到上游端点的 TLS 连接
        mutual:
          label: 双向 - 通过客户端证书进行身份认证，使用双向的 TLS 安全连接到上游
      clientCertificate:
        label: 客户端证书
        placeholder: 例如：/etc/certs/myclientcert.pem
        error: 客户端证书是必填项。
      privateKey:
        label: 私钥
        placeholder: 例如：/etc/certs/client_private_key.pem
        error: 私钥是必填项。
      caCertificates:
        label: CA 证书
        placeholder: 例如：/etc/certs/rootcacerts.pem
      sni:
        label: SNI
        placeholder: 例如：nginx.example.com
      subjectAltNames:
        label: 使用者可选名称
        placeholder: 例如：example.com
        add: 添加使用者可选名称
  egressGateway: 启用 Egress 网关
  ingressGateway: 启用 Ingress 网关
  istiodRemote: 启用 istiodRemote
  kiali: 启用 Kiali
  pilot: 启用 Pilot
  policy: 启用 Policy
  pilotRequired: 必须启用 Pilot 才能启用 Kiali
  poweredBy: 由 <a target="_blank" rel="noopener noreferrer nofollow" href='https://istio.io/latest/'>Istio</a> 提供支持
  telemetry: 启用遥测
  titles:
    components: 组件
    customAnswers: 自定义回复
    advanced: 高级选项
    description: 描述
  tracing: 启用 Jaeger 跟踪（有限）
  v1Warning: 在安装这个版本前，请卸载<code>istio-system</code> 命名空间中的当前 Istio 版本。

labels:
  addLabel: 添加标签
  addSetLabel: 添加/设置标签
  addTag: 添加标签
  addTaint: 添加污点
  addAnnotation: 添加注释
  labels:
    title: 标签
    description: 键值对，是附加到指定标识属性的对象。
    fleetClusterTooltip: 标签更改应用到管理集群并同步到 Fleet 集群。
    show: 显示系统标签
    hide: 隐藏系统标签
  annotations:
    title: 注释

landing:
  clusters:
    title: 集群
    provider: 提供商
    kubernetesVersion: Kubernetes 版本
    explorer: 浏览器
    explore: 浏览
    cores: |-
      {count, plural,
      =1 {核}
      other {核}}
    cpuUsed: 已用 CPU
    memoryUsed: 已用内存
  seeWhatsNew: 点击右侧链接，了解此版本的新功能和优化。
  whatsNewLink: "2.8 的新功能"
  learnMore: 了解更多
  support: 支持
  community:
    title: 社区支持
    docs: Rancher 官方文档
    forums: 论坛
  commercial:
    title: 商业支持
    body: 了解商业支持
  landingPrefs:
    title: 更改登录后显示的页面：
    userPrefs: 偏好设置
    body: "登录后显示："
    options:
      homePage: 主页
      lastVisited: 上次访问的页面
      custom: "集群"
  welcomeTo: '欢迎使用 {vendor}'

logging:
  clusterFlow:
    noOutputsBanner: 选定的命名空间中没有集群输出
  flow:
    clusterOutputs:
      doesntExistTooltip: 该集群输出不存在
      label: 集群输出
    matches:
      banner: 配置要拉取哪些容器日志
      unsupportedConfig: 此资源包含表单编辑器不支持的匹配配置。请使用 YAML 进行编辑。
      label: 匹配
      addSelect: 添加包含规则
      addExclude: 添加排除规则
      pods:
        title:
          include: 包括 Pod
          exclude: 排除 Pod
        keyLabel: Pod 标签键
        valueLabel: Pod 标签值
        addLabel: 添加 Pod
      nodes:
        title:
          include: 仅限特定节点
          exclude: 排除特定节点
        placeholder: "默认值：任何节点"
      containerNames:
        title:
          include: 仅限特定的容器名称
          exclude: 排除特定的容器名称
        placeholder: "默认值：任何容器"
      namespaces:
        title:
          include: 仅限特定的命名空间
          exclude: 排除特定的命名空间
        placeholder: "默认值：任何命名空间"

    filters:
      label: 筛选
    outputs:
      doesntExistTooltip: 该集群输出不存在
      sameNamespaceError: 输出必须位于与流相同的命名空间中。
      label: 输出
  install:
    k3sContainerEngine: K3S 容器引擎
    enableAdditionalLoggingSources: 启用加强版云日志服务
    dockerRootDirectory: Docker 根目录
    systemdLogPath: systemd 日志路径
    tooltip: '某些 Kubernetes 发行版在 <code>journald</code>中记录日志。你需要定义<code>systemdLogPath</code> 以收集日志。默认路径是<code>/run/log/journal</code>，但某些 Linux 发行版不默认使用该路径。'
    url: '<a href="https://ranchermanager.docs.rancher.com/v2.8/integrations-in-rancher/logging/logging-helm-chart-options" target="_blank" rel="noopener nofollow noreferrer">了解更多</a>'
    default: /run/log/journal
  elasticsearch:
    host: 主机
    scheme: Scheme
    port: 端口
    indexName: 索引名称
    user: 用户名
    password: 密码
    caFile:
      label: CA 证书文件
    clientCert:
      label: 客户端证书
      placeholder: 粘贴 CA 证书
    clientKey:
      label: 客户端密钥
      placeholder: 粘贴客户端密钥
    clientKeyPass: 传自密文的客户端密钥
    verifySsl: 验证 SSL
    sslVersion: SSL 版本
    suppressTypeName:
      label: 抑制类型名称
      elasticSearchTips: 默认抑制类型名称，用于兼容日志服务器。如果你的 Elasticsearch >= 8.0.0，则需要启用。
      openSearchTips: 默认抑制类型名称，用于兼容日志服务器。如果你的 OpenSearch >= 2.0.0，则需要启用。
  redis:
    host: 主机
    port: 端口
    dbNumber: Redis 数据库编号
    ttl: 每个键的 TTL
    password: 密码
    format:
      title: 格式
      type: 类型
  gelf:
    host: 主机
    port: 端口
    protocol: 协议
    tls: 启用 TLS
    tlsOptions:
      clientCert: 客户端证书
      clientKey: 客户端证书密钥
      allCiphers: 允许使用任何密码
      tlsVersion: TLS 版本
      noVerify: 跳过 TLS 验证
  kafka:
    brokers: Broker
    defaultTopic: 默认主题
    saslOverSsl: 通过 SSL 实现 SASL
    scramMechanism: SCRAM 机制
    username: 用户名
    password: 密码
    sslCaCert:
      label: CA 证书
      placeholder: 粘贴 CA 证书
    sslClientCert:
      label: CA 证书
      placeholder: 粘贴客户端证书
    sslClientCertChain:
      label: 证书链
      placeholder: 粘贴客户端证书链
    sslClientCertKey: SSL 客户端证书密钥
  loki:
    url: URL
    urlInvalid: URL 格式不正确。请在保存前检查并更正 URL 格式。
    tenant: 租户
    username: 用户名
    password: 密码
    configureKubernetesLabels: 以类似 Prometheus 的格式配置 Kubernetes 元数据
    extractKubernetesLabels: 提取 Kubernetes 标签作为 Loki 标签
    dropSingleKey: 如果一条记录只有1个键，那么只需将日志行设置为该值并丢弃该键。
    caCert: CA 证书
    cert: CA 证书
    key: 密钥
  awsElasticsearch:
    url: URL
    keyId: 密钥 ID
    secretKey: Secret Key
  azurestorage:
    storageAccount: 账号
    accessKey:  Access Key
    container: 容器
    path: 路径
    storeAs: 存储为
  cloudwatch:
    keyId: 密钥 ID
    secretKey: Secret Key
    endpoint: 端点
    region: 区域
    logGroupName: 日志组名称
    logStreamName: 日志流名称
  datadog:
    apiKey: API 密钥
    useSSL: 使用 SSL
    useCompression: 使用压缩
    host: 主机
  file:
    path: 路径
  gcs:
    project: 项目
    credentialsJson: 凭证
    bucket: 存储桶
    path: 路径
    overwriteExistingPath: 覆盖现有路径
  kinesisStream:
    streamName: 流名称
    keyId: 密钥 ID
    secretKey: Secret Key
  logdna:
    apiKey: API 密钥
    hostname: 主机名
    app: 应用
  logz:
    url: URL
    port: 端口
    token: API Token
    enableCompression: 启用压缩
  newrelic:
    apiKey: API 密钥
    licenseKey: 许可证密钥
    baseURI: 基本 URI
  sumologic:
    endpoint: 端点
    sourceName: 源名称
  syslog:
    host: 主机
    port: 端口
    transport: 传输
    insecure: 不安全
    trustedCaPath: CA 路径
    format:
      title: 格式
      type: 类型
      addNewLine: 添加新行
      messageKey: 消息密钥
    buffer:
      title: 缓冲
      tags: 标签
      chunkLimitSize: 块大小限制
      chunkLimitRecords: 块限制 chunkLimitRecords
      totalLimitSize: 总限制大小
      flushInterval: 刷新时间间隔
      timekey: Timekey
      timekeyWait: Timekey 等待
      timekeyUseUTC: Timekey 使用 UTC
  s3:
    keyId: 密钥 ID
    secretKey: Secret Key
    endpoint: 端点
    bucket: 存储桶
    path: 路径
    overwriteExistingPath: 覆盖现有路径
  output:
    buffer:
      label: 输出缓冲
    selectOutputs: 选择输出
    selectBanner: 选择以配置输出
    sections:
      target: 目标
      access: 访问
      certificate: 连接
      labels: 标签
      configuration: 配置
  outputProviders:
    elasticsearch: Elasticsearch
    opensearch: OpenSearch
    redis: Redis
    splunkHec: Splunk
    kafka: Kafka
    forward: Fluentd
    gelf: GELF
    loki: Loki
    awsElasticsearch: Amazon Elasticsearch
    azurestorage: Azure Storage
    cloudwatch: Cloudwatch
    datadog: Datadog
    file: 文件
    gcs: GCS
    kinesisStream: Kinesis Stream
    logdna: LogDNA
    logz: LogZ
    newrelic: New Relic
    sumologic: SumoLogic
    syslog: Syslog
    s3: S3
    unknown: 未知
  overview:
    poweredBy: Banzai Cloud
    clusterLevel: 集群级别
    namespaceLevel: 命名空间级别
  provider: 提供商
  splunk:
    host: 主机
    port: 端口
    protocol: 协议
    index: 索引
    token: Token
    insecureSsl: 不安全的 SSL
    indexName: 索引名称
    source: 源
    caFile: CA 证书文件
    caPath: CA 路径
    clientCert: 客户端证书
    clientKey: 客户端密钥
  forward:
    host: 主机
    port: 端口
    sharedKey: 共享密钥
    username: 用户名
    password: 密码
    clientCertPath: 客户端证书路径
    clientPrivateKeyPath: 客户端私钥路径
    clientPrivateKeyPassphrase: 客户端私钥密码

login:
  howdy: 你好！
  welcome: 欢迎使用 {vendor}
  loggedOut: 你已登出当前账号。
  loginAgain: 请重新登录。
  serverError:
    authFailedCreds: "登录失败。请检查凭证，或查看你是否有登录权限。"
    authFailed: "登录失败，你可能没有登录权限。"
    unknown: "登录时发生错误，请联系你的系统管理员。"
    invalidSamlAttrs: "无效的 SAML 属性"
    noResponse: "没有收到响应。"
  error: 登录时发生错误，请重试。
  clientError: 无效的用户名或密码，请重试。
  specificError: '登录时发生错误：{msg}'
  useLocal: 使用本地账号登录
  loginWithProvider: 使用 {provider} 登录
  username: 用户名
  password: 密码
  loggingIn: 登录中...
  loggedIn: 已登录
  loginWithLocal: 使用本地用户登录
  useProvider: 使用 {provider} 用户
  useNonLocal: 使用非本地用户
  remember:
    label: 记住用户名

logout:
  message: 正在登出...

managementNode:
  customName: 自定义名称

monitoring:
  accessModes:
    many: 多次读写
    once: 一次读写
    readOnlyMany: 多次只读
  aggregateDefaultRoles:
    label: 聚合为默认 Kubernetes 角色
    tip: '将标签添加到 Monitoring Chart 部署的 ClusterRoles 上，以<a target="_blank" rel="noopener nofollow noreferrer" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles">聚合到相应的默认 K8s 进行管理、编辑和查看 ClusterRoles</a>。'
  alerting:
    config:
      label: Alertmanager 配置
    enable:
      label: 部署 Alertmanager
    secrets:
      additional:
        info: 密文应挂载到容器路径 <pre class='inline-block m-0'>/etc/alertmanager/secrets/</pre>
        label: 补充密文
      existing: 选择现有的配置密文
      info: |
        <span class="text-bold">创建默认配置</span>。在部署这个 Chart 时，将在<pre class='inline-block m-0'>cattle-monitoring-system</pre> 命名空间中创建一个包含 Alertmanager 配置的密文，名称为<pre class='inline-block m-0'>alertmanager-rancher-monitoring-alertmanager</pre>。默认情况下，在卸载或升级此 Chart 时，此密文均不会被修改。<br />
        部署这个 Chart 之后，你需要在 UI 中编辑密文，从而添加 Alertmanager 用于发送告警的自定义通知配置。<br /> <br />
        <span class="text-bold">选择一个现有的配置密文</span>：你必须指定一个存在于<pre class='inline-block m-0'>cattle-monitoring-system</pre>命名空间内的密文。如果命名空间不存在，你将无法选择现有的密钥。
      label: Alertmanager 密文
      new: 创建默认配置
      radio:
        label: 配置密文
    validation:
      duplicatedReceiverName: 名称为 {name} 的接收器已存在。
    templates:
      keyLabel: 文件名称
      label: 模板文件
      valueLabel: YAML 模板
    title: 配置 Alertmanager
  clusterType:
    label: 集群类型
    placeholder: 选择集群类型
  createDefaultRoles:
    label: 创建默认 Monitoring 集群角色
    tip: '创建分配给用户的<code>monitoring-admin</code>，<code>monitoring-edit</code>，和<code>monitoring-view</code> ClusterRoles，为其使用 Monitoring Chart 安装的 CRD 提供权限。'
  etcdNodeDirectory:
    label: ETCD 节点证书目录
    tooltip: '如果集群的 ETCD 节点使用 RancherOS，请把这个选项设置为<pre class=''inline-block m-0''>/opt/rke/etc/kubernetes/ssl</pre>。不支持需要指定多个证书目录的混合环境（例如，由 RancherOS 和 Ubuntu 主机组成的 ETCD Plane）。'
  grafana:
    storage:
      annotations: PVC 注释
      className: 存储类名称
      existingClaim: 使用现有 Claim
      finalizers: PVC Finalizer
      label: Grafana 存储
      mode: 访问模式
      selector: 选择器
      size: 大小
      subpath: 使用子路径
      type: 持久存储类型
      types:
        existing: 使用现有 PVC 启用 Grafana
        statefulset: 使用 StatefulSet 模板启用 Grafana
        template: 使用 PVC 模板启用 Grafana
      volumeName: 卷名称
    title: 配置 Grafana
  hostNetwork:
    label: 为 Prometheus Operator 使用主机网络
    tip: 如果你的托管 Kubernetes 集群使用自定义 CNI（例如 Calico），此选项必须启用，以允许托管 Controller Plane 与 Prometheus Operator 暴露的准入 Webhook 通信，以更改或验证传入的 PrometheusRule。
  overview:
    alertsList:
      ends:
        label: 停止于
      label: 已启用的告警
      message:
        label: 消息
      severity:
        label: 严重程度
      start:
        label: 开始于
    linkedList:
      alertManager:
        description: 已启用的告警
        label: Alertmanager
      grafana:
        description: Metrics 仪表板
        label: Grafana
      na: 资源不可用
      prometheusPromQl:
        description: PromQL 图表
        label: Prometheus 图表
      prometheusRules:
        description: 配置规则
        label: PrometheusRules
      prometheusTargets:
        description: 配置目标
        label: Prometheus 目标
    subtitle: '由 <a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener noreferrer nofollow">Prometheus</a> 提供支持'
    title: 仪表板
  prometheus:
    config:
      adminApi: Admin API
      evaluation: 评估间隔
      ignoreNamespaceSelectors:
        help: '如果忽略命名空间选择器，集群管理员可以限制团队监视命名空间之外的授权资源。然而，这会影响需要跨命名空间抓取监控数据的应用（例如Istio）的功能。'
        label: 命名空间选择器
        radio:
          enforced: '使用：监控可以访问命名空间字段匹配的命名空间中的资源'
          ignored: '忽略：监控只能访问它们所在命名空间中的资源'
      limits:
        cpu: CPU 限制
        memory: 内存限制
      requests:
        cpu: 请求的 CPU
        memory: 请求的内存
      resourceLimits: 资源限制
      retention: 预留
      retentionSize: 预留大小
      scrape: 抓取间隔
    storage:
      className: 存储类名称
      label: Prometheus 的持久存储
      mode: 访问模式
      selector: 选择器
      selectorWarning: '如果你使用动态配置器（例如 Longhorn），不要指定选择器，因为带有非空选择器的 PVC 不能动态配置 PV。'
      size: 大小
      volumeName: 卷名称
    title: 配置 Prometheus
    warningInstalled: |
      警告：当前已部署 Prometheus Operator。目前不支持在一个集群上部署多个Prometheus Operators。在安装此 Chart 之前，请从该集群中移除所有其他的 Prometheus Operator。
      如果你是从启用了 Monitoring 功能的旧版 {vendor} 迁移过来的，请在安装此 Chart 之前完全禁用此集群的 Monitoring 功能。
  receiver:
    addReceiver: 添加接收器
    fields:
      name: 名称
    tls:
      label: SSL
      caFilePath:
        label: CA 文件路径
        placeholder: 例如：./ca-file.csr
      certFilePath:
        label: 证书文件路径
        placeholder: 例如：./cert-file.crt
      keyFilePath:
        label: 密钥文件路径
        placeholder: 例如：./key-file.pfx
      secretsBanner: 部署 Monitoring Chart 时，必须在<<pre class="inline-block m-0 p-0 vertical-middle">alertmanager.alertmanagerSpec.secrets</pre>中引用以下文件路径。详情请查看<a href="{docsBase}/monitoring-alerting/" target="_blank" rel="noopener noreferrer nofollow">官方文档</a>。
  projectMonitoring:
    detail:
      error: "无法获取具有状态的仪表板值： "
    list:
      banner: 项目监控配置存储在 ProjectHelmChart 资源中
      empty:
        message: 还没有为任何项目配置监控
        canCreate: 单击“创建”为项目添加监控
        cannotCreate: 联系管理员添加项目监控
  route:
    label: 路由
    fields:
      groupBy: 分组依据
      groupInterval: 组间隔
      groupWait: 组等待时长
      receiver: 接收器
      repeatInterval: 重复间隔
  routesAndReceivers: 路由和接收器（已弃用）
  monitors: 监控
  projectMonitors: 项目监控
  alertmanagerConfig:
    description: 如果要配置用于项目告警和集群告警的路由和接收器，你可以在 AlertmanagerConfig 资源中进行配置。
    empty: 还没有为任何可访问的命名空间配置告警。
    getStarted: 单击“创建”开始配置告警。
    receiverTooltip: 此路由会将告警发送到选定的接收器，该接收器必须在同一个 AlertmanagerConfig 中定义。
    deprecationWarning: 路由和接收器资源已弃用。路由和接收器不能在此页面上作为单独的 Kubernetes 资源进行管理。它们应配置为 AlertmanagerConfig 资源中的 YAML 字段。
    routeInfo: 此表单支持配置一个将流量定向到接收器的路由。通过在 YAML 中配置子路由，你可以将告警定向到更多接收器。
    receiverFormNames:
      create: 在 AlertmanagerConfig 中创建接收器
      edit: 在 AlertmanagerConfig 中编辑接收器
      editYaml: 编辑 AlertmanagerConfig
      detail: AlertmanagerConfig 中的接收器
    disabledReceiverButton: 创建 AlertmanagerConfig 后就可以使用接收器
    error: 保存 AlertmanagerConfig 时出错
    email:
      username: 认证用户名
      password: 具有 Auth 密码的密文
    slack:
      apiUrl: 具有 Slack Webhook URL 的密文
    pagerDuty:
      routingKey: 具有路由密钥的密文
      serviceKey: 具有 Service Key 的密文
    opsgenie:
      apiKey: 具有 API Key 的密文
    webhook:
      url: URL
      urlSecret: URL 密文
      urlSecretTooltip: 'urlSecret 优先于 url。你需要定义 urlSecret 或 url。'
    auth:
      bearerTokenSecret: 持有者令牌密文
      basicAuthUsername: 具有基本认证用户名的密文
      basicAuthPassword: 具有基本认证密码的密文
  installSteps:
    uninstallV1:
      stepTitle: 卸载 V1
      stepSubtext: 卸载旧版 Monitoring
      warning1: 已部署 Monitoring V1。你需要先卸载 Monitoring V1 才能安装 Monitoring V2。
      warning2: <a target="blank" href="{docsBase}/monitoring-alerting/guides/migrating/" target='_blank' rel='noopener nofollow'>了解迁移到 Monitoring V2 的步骤</a>。
      promptDescription: <div class="mt-20 mb-20">你正在尝试卸载 Monitoring V1。请确保你已阅读迁移步骤。</div>
      success1:  Monitoring V1 已成功卸载。
      success2: 点击下一步继续
  tabs:
    alerting: 告警
    general: 通用
    grafana: Grafana
    prometheus: Prometheus
    projectMetrics: 项目指标
  v1Warning: '当前 Monitoring 由 Cluster Manager 部署。如果你需要从启用了 Monitoring 的旧版 {vendor} 迁移，请先在 Cluster Manager 中禁用 Monitoring，然后再在 Cluster Explorer 中安装新版 {vendor} Monitoring Chart。'

monitoringReceiver:
  addButton: 添加 {type}
  custom:
    label: 自定义
    title: 自定义配置
    info: 此处提供的 YAML 将直接附加到 Alertmanager 配置密文的接收器中。
  email:
    label: 电子邮件
    title: 电子邮件配置
  opsgenie:
    label: Opsgenie
    title: Opsgenie 配置
  pagerduty:
    label: PagerDuty
    title: PagerDuty 配置
    info: "你可以点击<a href='https://www.pagerduty.com/docs/guides/prometheus-integration-guide/' target='_blank' rel='noopener nofollow' class='flex-right'>这里</a>了解更多关于为 PagerDuty 创建集成密钥的信息。"
  slack:
    label: Slack
    title: Slack 配置
    info: "你可以点击<a href='https://rancher.slack.com/apps/A0F7XDUAZ-incoming-webhooks' target='_blank' rel='noopener noreferrer nofollow'>这里</a> 了解更多为 Slack 创建传入 Webhook 的信息。"
  webhook:
    label: Webhook
    title: Webhook 配置
    urlTooltip: 对于一些 Webhook 而言，这是一个指向 DNS 服务的 URL
    modifyNamespace: 如果 <pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre> 的默认值改变了，请以 http://&lt;new_service_name&gt;.&lt;new_namespace&gt.svc.&lt;port&gt/&lt;path&gt 格式更新以下 URL。
    banner: 要使用 Microsoft Teams 或短信，请先安装至少一个 <pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre> 实例。
    add:
      selectWebhookType: 选择 Webhook 类型
      generic: 通用
      msTeams: Microsoft Teams
      alibabaCloudSms: 阿里巴巴短信
  auth:
    label: 认证
    authType: 认证类型
    username: 用户名
    password: 密码
    none:
      label: 无
    bearerToken:
      label: 持有者令牌
      placeholder: 例如：secret-token
    basicAuth:
      label: 基本认证
    bearerTokenFile:
      label: 持有者令牌文件
      placeholder: 例如：./user_token
  tls:
    ca: 具有 CA 的密文
    cert: 具有客户证书的密文
    key: 带有客户端密钥的密文
    serverName: 服务器名称
    serverNameTooltip: 用于验证目标的主机名。
  shared:
    proxyUrl:
      label: 代理 URL
      placeholder: 例如：http://my-proxy/
    sendResolved:
      label: 发送已解决告警

alertmanagerConfigReceiver:
  secretKeyId: 密钥 ID
  name: 接收器名称
  addButton: 添加接收器
  receivers: 接收器
  namespaceWarning: 找不到用于获取密文的命名空间，无法渲染密文选择器。
  receiverTypes: "可以在表单中编辑以下接收器类型：Email、Slack、PagerDuty、Opsgenie 和 Webhook。如果是其他类型的接收器，则编辑 AlertmanagerConfig YAML。"
  slack:
    webhookUrl: Webhook URL
    apiUrlTooltip: 包含 Slack webhook URL 的 Secret Key。该密钥需要与 AlertmanagerConfig 对象位于同一命名空间中，并且可由 Prometheus Operator 访问。
monitoringRoute:
  groups:
    label: 分组依据
    addGroupByLabel: 告警分组标签
    groupByTooltip: 将每个标签添加为 key:value 格式的字符串。特殊标签 ... 会使用所有可能的标签聚合。如果指定了，则 ... 必须是列表中的唯一元素。
  info: 这是 Alertmanager 使用的最顶层路由，如果告警不匹配路由，则使用这个路由作为默认目的位置。此路由必须存在，不能删除。
  interval:
    label: 组间隔
  matching:
    info: 根路由必须匹配所有内容，因此无法配置匹配。
    label: 匹配
    addMatcher: 添加匹配器
    matchType: 匹配类型
    name: 名称
    nameTooltip: 要匹配的标签
    value: 值
    valueTooltip: 要匹配的标签值
  receiver:
    type: 接收器类型
    add: 添加接收器
    label: 接收器
    oneOrMoreLabel: 一个或多个接收器
    addMatch: 添加匹配
  regex:
    label: 匹配正则表达式
  repeatInterval:
    label: 重复间隔
  wait:
    label: 组等待时长

moveModal:
  title: 移动到新的项目?
  description: '你正在移动下列命名空间：'
  moveButtonLabel: 移动
  targetProject: 目标项目

nameNsDescription:
  name:
    label: 名称
    placeholder: '独特的名称'
  namespace:
    label: 命名空间
    placeholder: ''
  workspace:
    label: 工作空间
    placeholder:
  description:
    label: 描述
    placeholder: 输入可以描述该资源的文本

namespace:
  containerResourceLimit: 容器资源限制
  resourceQuotas: 资源配额
  project:
    label: 项目
    none: (None)
  resources: 资源
  enableAutoInjection: 启用 Istio 自动注入
  disableAutoInjection: 禁用 Istio 自动注入
  move: 移动
  total: 总计
  workloads: 工作负载
  label: 命名空间
  selectNamespace: 选择命名空间
  createNamespace: 创建新的命名空间
  selectOrCreate: 选择或创建命名空间
  resourceStates:
      success: '活动'
      info: '转换中'
      warning: '警告'
      error: '错误'
      unknown: '未知'
      paused:
        stateName: '非活动'
        shortDescription: Deployment 已暂停
        longDescription: Deployment 已暂停。如果 Deployment 暂停了，Controller 无法部署修改。

namespaceFilter:
  noMatchingOptions: 没有匹配的选项
  more: "+{more}"
  selected:
    label: |-
      {total, plural,
      one {已选择 1 项}
      other {已选择 {total} 项}
      }

namespaceList:
  selectLabel: 命名空间
  addLabel: 添加命名空间

navLink:
  name:
    label: 名称
    placeholder: '例如：foo-bar'
  label:
    label: 显示名称
    placeholder: '链接显示的文本'
  tabs:
    link:
      label: 链接类型
      type:
        label: 链接类型
        service: 链接到服务
        url: 链接到 URL
      toURL:
        label: 目标 URL
        placeholder: '例如：https://rancher.com'
      toService:
        service:
          label: 服务（命名空间/名称）
          placeholder: '例如：cattle-system/rancher-webhook'
        path:
          label: 路径
          placeholder: '例如：proxy/?orgId=1'
        port:
          label: 端口
          placeholder: '例如：80'
        scheme:
          label: Scheme
          placeholder: '例如：http'
    target:
      label: 窗口目标
      option:
        blank: 新窗口
        self: 替换窗口
        named: 自定义命名窗口
      namedValue:
        label: 窗口名称
    group:
      label: 组
      group:
        label: 组名称
        tooltip: 将链接分配给组
      sideLabel:
        label: 链接标签
      description:
        label: 链接描述
    groupImage:
      label: 组图片
      iconSrc:
        tip: '图片的高度应为 21 像素，最大宽度为 200 像素。最大文件大小为 20KB。支持的格式：JPEG、PNG、SVG。'
        label: 添加图片
networkpolicy:
  egress:
    label: Egress 规则
    enable: 配置 Egress 规则以限制传出流量
    ruleLabel: 目标
    ruleHint: 只允许将流量传出到配置的目标
    portHint: 传出流量只允许连接到配置的端口
  ingress:
    label: Ingress 规则
    enable: 配置 Ingress 规则以限制传入流量
    ruleLabel: 来源
    ruleHint: 仅允许来自配置的来源的传入流量
    portHint: 传入流量只允许连接到配置的端口
  labelsAnnotations:
    label: 标签 & 注释
  rules:
    pod: Pod
    namespace: 命名空间
    ruleLabel: 规则 {index}
    addPort: 添加允许的端口
    type: 规则类型
    ingress:
      add: 添加允许的流量源
    egress:
      add: 添加允许的流量目标
    ports:
      label: 允许的端口
      port:
        label: 端口
        placeholder: 例如：8080
      protocol: 协议
    ipBlock:
      label: IP 锁定
      exceptions: 例外
      cidr:
        label: CIDR
        placeholder: 例如：1.1.1.0/24
      addExcept: 添加例外
      invalidCidr: "无效的 CIDR"
      invalidExceptionCidrs: "无效的例外： "
    podSelector:
      label: Pod 选择器
    namespaceSelector:
      label: 命名空间选择器
    namespaceAndPodSelector:
      label: 命名空间/Pod 选择器
  config:
    label: 配置
  selectors:
    label: 选择器
    hint: NetworkPolicy 应用于选定的 Pod
    matchingPods:
      matchesSome: |-
        {matched, plural,
          =0 {匹配 {total, number} 个 Pod 中的 0 个}
          =1 {匹配 {total, number} 个 Pod 中的 1 个："{sample}"}
          other {匹配 {total, number} 个 Pod 中的 {matched, number} 个，包括 "{sample}"}
        }
    matchingNamespaces:
      matchesSome: |-
        {matched, plural,
          =0 {匹配 {total, number} 个命名空间中的 0 个}
          =1 {匹配 {total, number} 个命名空间中的 1 个："{sample}"}
          other {匹配 {total, number} 个命名空间中的 {matched, number} 个，包括 "{sample}"}
        }
    matchingNamespacesAndPods:
      tooltip: 指定命名空间选择器和 Pod 选择器的单条规则，用于选择特定命名空间中的特定 Pod
      matchesSome: |-
        {matchedNamespaces, plural,
          =0 { 在 0 个命名空间中（总共 {totalNamespaces, number} 个）}
          =1 { 在 1 个命名空间（总共 {totalNamespaces, number} 个）"{sampleNamespaces}" 中}
          other { 在 {matchedNamespaces, number} 个命名空间中（总共 {totalNamespaces, number} 个），包括 "{sampleNamespaces}"}
        }，{matchedPods, plural,
          =0 {匹配 {totalPods, number} 个 Pod 中的 0 个 }
          =1 {匹配 {totalPods, number} 个 Pod 中的 1 个："{samplePods}"}
          other {匹配 {totalPods, number} 个 Pod 中的 {matchedPods, number} 个，包括 "{samplePods}"}
        }
node:
  list:
    pool: 池
    noNodes: 这个池是空的
    nodeTaint: 污点
    scaleDown: 缩容池
    scaleUp: 扩容池
    poolDescription:
      noSize: 没有大小
      noLocation: 没有位置
    nodeLabels: 标签
    hideLabels: 显示更少
    showLabels: 显示更多
  detail:
    detailTop:
      containerRuntime: 容器运行时
      internalIP: 内网 IP
      externalIP: 外网 IP
      os: 操作系统
      version: 版本
    glance:
      consumptionGauge:
        used: 已使用
        amount: "已使用 {total} {unit} 中的 {used}"
        cpu: CPU
        memory: 内存
        pods: Pod
      diskPressure: 磁盘压力
      kubelet: Kubelet
      memoryPressure: 内存压力
      pidPressure: PID 压力
    tab:
      conditions: 状况
      images: 镜像
      metrics: 指标
      info:
        label: 信息
        key:
          architecture: 架构
          bootID: Boot ID
          containerRuntimeVersion: 容器运行时版本
          kernelVersion: 内核版本
          kubeProxyVersion: kube-proxy 版本
          kubeletVersion: Kubelet 版本
          machineID: 主机 ID
          operatingSystem: 操作系统
          osImage: 镜像
          systemUUID: 系统 UUID
      pods: Pod
      taints: 污点
  actions:
    downloadSSHKey: 下载 SSH 密钥
    downloadNodeConfig: 下载密钥
    scaleDown: 缩容
    forceDelete: 强制删除

persistentVolume:
  pluginConfiguration:
    label: 插件配置
  plugin:
    label: 卷插件
    inTree: 树内插件
    unsupported: （不支持）
  capacity:
    label: 容量
  customize:
    label: 自定义
    affinity:
      label: 节点选择器
      addLabel: 添加节点选择器
    assignToStorageClass:
      label: 分配给存储类
    mountOptions:
      label: 挂载选项
      addLabel: 添加选项
    accessModes:
      label: 访问模式
      readWriteOnce: 单节点读写
      readOnlyMany: 多节点只读
      readWriteMany: 多节点读写
  shared:
    partition:
      label: 分区
      placeholder: 例如：1; 0 代表整个设备
    readOnly:
      label: 只读
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    secretName:
      label: 密文名称
      placeholder: 例如：secret
    secretNamespace:
      label: 密文所在的命名空间
      placeholder: 例如：default
    monitors:
      add: 添加监控
  vsphereVolume:
    label: VMWare vSphere 卷
    volumePath:
      label: 卷路径
      placeholder: 例如：/
    storagePolicyName:
      label: 存储策略名称
      placeholder: 例如：sp
    storagePolicyId:
      label: 存储策略 ID
      placeholder: 例如：sp1
  csi:
    label: CSI
    suffix: (CSI)
    driver:
      label: 驱动
      placeholder: 例如：driver.longhorn.io
    volumeHandle:
      label: 卷句柄
      placeholder: 例如：pvc-xxxx
    volumeAttributes:
      add: 添加卷属性
    nodePublishSecretName:
      label: 节点发布密文名称
      placeholder: 例如：secret
    nodePublishSecretNamespace:
      label: 节点发布密文命名空间
      placeholder: 例如：default
    nodeStageSecretName:
      label: 节点暂存密文名称
      placeholder: 例如：secret
    nodeStageSecretNamespace:
      label: 节点暂存密文命名空间
      placeholder: 例如：default
    controllerExpandSecretName:
      label: Controller 展开密文名称
      placeholder: 例如：secret
    controllerExpandSecretNamespace:
      label: Controller 展开密文命名空间
      placeholder: 例如：default
    controllerPublishSecretName:
      label: Controller 发布密文名称
      placeholder: 例如：secret
    controllerPublishSecretNamespace:
      label: Controller 发布密文命名空间
      placeholder: 例如：default
    drivers:
      disk-csi-azure-com: Azure 磁盘 (CSI)
      file-csi-azure-com: Azure 文件 (CSI)
      driver-longhorn-io: Longhorn (CSI)
      driver-harvesterhci-io: Harvester (CSI)
      nfs-csi-k8s-io: NFS (CSI)
      ebs-csi-aws-com: AWS Elastic Block Store (CSI)
      rbd-csi-ceph-com: Ceph RBD (CSI)
      org-gluster-glusterfs: GlusterFS (CSI)
      pd-csi-storage-gke-io: GCE 持久磁盘 (CSI)
      cinder-csi-openstack-org: Cinder (CSI)
      pxd-portworx-com: Portworx (CSI)
      quobyte-csi: Quobyte (CSI)
      storageos: StorageOS (CSI)
      csi-vsphere-vmware-com: vSphere (CSI)
  cephfs:
    label: Ceph 文件系统（不支持）
    path:
      label: 路径
      placeholder: 例如：/var
    user:
      label: 用户名
      placeholder: 例如：root
    secretFile:
      label: 密文文件
      placeholder: 例如：secret
  rbd:
    label: Ceph RBD（不支持）
    user:
      label: 用户名
      placeholder: 例如：root
    keyRing:
      label: 密钥环
      placeholder: 例如：/etc/ceph/keyring
    pool:
      label: 池
      placeholder: 例如：rbd
    image:
      label: 镜像
      placeholder: 例如：image
  fc:
    label: 光纤通道（不支持）
    targetWWNS:
      add: 添加目标 WWN
    wwids:
      add: 添加 WWID
    lun:
      label: Lun
      placeholder: 例如：2
  flexVolume:
    label: FlexVolume（不支持）
    driver:
      label: 驱动
      placeholder: 例如：driver
    options:
      add: 添加选项
  flocker:
    label: Flocker（不支持）
    datasetName:
      label: 数据集名称
      placeholder: 例如：dataset
    datasetUUID:
      label: 数据集 UUID
      placeholder: 例如：uuid
  glusterfs:
    label: Gluster 卷（不支持）
    endpoints:
      label: 端点
      placeholder: 例如：glusterfs-cluster
    path:
      label: 路径
      placeholder: 例如：kube-vol
  iscsi:
    label: iSCSI 目标（不支持）
    initiatorName:
      label: 发起者名称
      placeholder: iqn.1994-05.com.redhat:1df7a24fcb92
    iscsiInterface:
      label: iSCSI 接口
      placeholder: 例如：interface
    chapAuthDiscovery:
      label: CHAP 认证发现
    chapAuthSession:
      label: CHAP 认证会话
    iqn:
      label: IQN
      placeholder: iqn.2001-04.com.example:storage.kube.sys1.xyz
    lun:
      label: Lun
      placeholder: 例如：2
    targetPortal:
      label: 目标 Portal
      placeholder: 例如：portal
    portals:
      add: 添加 Portal
  cinder:
    label: Openstack Cinder 卷（不支持）
    volumeId:
      label: 卷 ID
      placeholder: 例如：vol
  quobyte:
    label: Quobyte 卷（不支持）
    volume:
      label: 卷
      placeholder: 例如：vol
    user:
      label: 用户名
      placeholder: 例如：root
    group:
      label: 组
      placeholder: 例如：abc
    registry:
      label: 镜像仓库
      placeholder: 例如：abc
  photonPersistentDisk:
    label: Photon 卷（不支持）
    pdId:
      label: PD ID
      placeholder: 例如：abc
  portworxVolume:
    label: Portworx 卷（不支持）
    volumeId:
      label: 卷 ID
      placeholder: 例如：abc
  scaleIO:
    label: ScaleIO 卷（不支持）
    volumeName:
      label: 卷名称
      placeholder: 例如：vol-0
    gateway:
      label: 网关
      placeholder: 例如：https://localhost:443/api
    protectionDomain:
      label: 保护域
      placeholder: 例如：pd01
    storageMode:
      label: 存储模式
      placeholder: 例如：ThinProvisioned
    storagePool:
      label: 存储池
      placeholder: 例如：sp01
    system:
      label: 系统
      placeholder: 例如：scaleio
    sslEnabled:
      label: 启用 SSL
  storageos:
    label: StorageOS（不支持）
    volumeName:
      label: 卷名称
      placeholder: 例如：vol
    volumeNamespace:
      label: 卷命名空间
      placeholder: 例如：default
  nfs:
    label: NFS 共享
    path:
      label: 路径
      placeholder: 例如：/var
    server:
      label: Server IP 地址
      placeholder: 例如：10.244.1.4
  longhorn:
    label: Longhorn
    volumeHandle:
      label: 卷句柄
      placeholder: 例如：pvc-xxxx
    options:
      label: 选项
      addLabel: 添加
  local:
    label: 本地
    path:
      label: 路径
      placeholder: 例如：/mnt/disks/ssd1
  hostPath:
    label: 主机路径
    pathOnTheNode:
      label: 节点上的路径
      placeholder: /mnt/disks/ssd1
    mustBe:
      label: 节点上的路径必须是：
      anything: '任意路径：不需要检查目标路径'
      directory: 一个目录，如果该目录不存在，则自动创建一个目录
      file: 一个文件，如果该文件不存在，则自动创建一个文件
      existingDirectory: 一个现有的目录
      existingFile: 一个现有的文件
      existingSocket: 一个现有的 socket
      existingCharacter: 一个现有的字符设备
      existingBlock: 一个现有的块设备
  gcePersistentDisk:
    label: Google 持久磁盘
    persistentDiskName:
      label: 持久磁盘名称
      placeholder: 例如：abc
  awsElasticBlockStore:
    label: Amazon EBS 磁盘
    volumeId:
      label: 卷 ID
      placeholder: 例如：volume1
  azureFile:
    label: Azure 文件系统
    shareName:
      label: 共享名称
      placeholder: 例如：abc
  azureDisk:
    label: Azure 磁盘
    diskName:
      label: 磁盘名称
      placeholder: 例如：kubernetes-pvc
    diskURI:
      label: 磁盘 URI
      placeholder: 例如：https://example.com/disk
    kind:
      label: 类型
      dedicated: 专用
      managed: 托管
      shared: 共享
    cachingMode:
      label: 缓存模式
      none: 无
      readOnly: 只读
      readWrite: 读写
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    readOnly:
      label: 只读

persistentVolumeClaim:
  name: 持久卷声明名称
  accessModes: 访问模式
  accessModesOptions:
    singleNodeRW: 单节点 读/写
    manyNodeR: 多节点 只读
    manyNodeRW: 多节点 读/写
  capacity: 容量
  storageClass: 存储类
  useDefault: 使用默认类
  volumes: 持久卷
  volumeName: 持久卷名称
  source:
    label: 源
    options:
      new: 使用存储类来配置新的持久卷
      existing: 使用现有的持久卷
  expand:
    label: 展开
    notSupported: 存储类不支持卷扩展
    notBound: 只能扩展绑定的 PVC
  volumeClaim:
    label: 卷声明
    storageClass: 存储类
    requestStorage: 需要的存储大小
    persistentVolume: 持久卷
    tooltips:
      noStorageClass: 没有列出存储类的权限，请手动输入名称。
      noPersistentVolume: 没有列出持久卷的权限，请手动输入名称。
  customize:
    label: 自定义
    accessModes:
      readWriteOnce: 单节点读写
      readOnlyMany: 多节点只读
      readWriteMany: 多节点读写
  status:
    label: 状态

podDisruptionBudget:
  budget:
    label: 预算
  minAvailable:
    label: 最小可用 Pod
  maxUnavailable:
    label: 最大不可用 Pod

inactivity:
  title: 会话即将过期
  titleExpired: 会话已过期
  banner: 由于不活动，你的会话即将过期。任何未保存的更改都将丢失。
  bannerExpired: 由于不活动，此选项卡中的会话已过期。
  content: 单击“恢复会话”来让选项卡中的会话保持活动状态，或在会话过期后刷新浏览器。
  contentExpired: 要返回此页面，请单击下面的“刷新”或刷新浏览器。
  cta: 恢复会话
  ctaExpired: 刷新

podSecurityAdmission:
  name: Pod 安全准入
  description: 定义要用于 Pod 安全的准入控制模式
  banner:
    modifications: '如果你更改正在使用的模板，在下次更新集群时会更新这些活动集群'
  labels:
    enforce: 执行
    audit: 审计
    warn: 警告
    usernames: 用户名
    runtimeClasses: RuntimeClass
    namespaces: 命名空间
    privileged: privileged
    baseline: baseline
    restricted: restricted
  version:
    placeholder: '版本（默认：latest）'
  exemptions:
    title: 豁免
    description: 允许为特定的用户名、RuntimeClassName 和命名空间创建 Pod，否则它们会被上方设置的策略禁止。
    placeholder: 输入以逗号分隔的 {psaExemptionsControl} 列表
prefs:
  title: 偏好设置
  theme:
    label: 主题
    light: 浅色
    auto: 自动
    dark: 深色
    autoDetail: 自动模式使用系统设置，或在{pm}点到次日{am}点间自动切换到深色模式。
  language: 语言
  landing:
    label: 登录页面
    vue: 集群浏览器
    ember: Cluster Manager
  displaySettings:
    title: 显示设置
    detail: 更改在 UI 中显示信息的方式。
  clusterToShow:
    label: 在侧边栏显示的集群数量
    value: |-
      {count, number}
  dateFormat:
    label: 日期格式
  timeFormat:
    label: 时间格式
  perPage:
    label: 每页行数
    value: |-
      {count, number}
  keymap:
    label: YAML 编辑器
    sublime: '默认'
    emacs: 'Emacs'
    vim: 'Vim'
  advFeatures:
    title: 高级功能
    viewInApi: 启用“在 API 中查看”
    allNamespaces: 显示由 LLMOS 管理的 system 命名空间（不要编辑或删除）
    themeShortcut: 使用快捷键（shift+T）来切换深色/浅色主题
    pluginDeveloper: 启用扩展开发者功能
    viewContainerDashboard: 启用容器管理页面
  hideDesc:
    label: 隐藏所有类型描述
  helm:
    'true': 包括预发布版本
    'false': 只显示正式版本
    label: Helm Chart
  confirmationSetting:
    title: 确认设置
    scalingDownPrompt: 缩减节点池时不要求确认。

principal:
  loading: 正在加载&hellip;
  error: 无法获取信息
  name: 名称
  loginName: 用户名
  type: 类型

probe:
  checkInterval:
    label: 检查间隔
    placeholder: '默认值是10秒'
  command:
    label: 运行命令
    placeholder: 例如：cat /tmp/health
  failureThreshold:
    label: 失败阈值
    placeholder: '默认值：3'
  httpGet:
    headers:
      label: 请求头
    path:
      label: 请求路径
      placeholder: 例如：/healthz
    port:
      label: 检查端口
      placeholder: 例如：80
      placeholderDeux: 例如：25
  initialDelay:
    label: 初始延迟
    placeholder: '默认值：0'
  successThreshold:
    label: 成功阈值
    placeholder: '默认值：1'
  timeout:
    label: 超时
    placeholder: '默认值：3'
  type:
    label: 类型
    placeholder: 选择检查类型

project:
  membersEditOnly: 只能应用等于或低于当前用户的权限
  members:
    label: 成员
  containerDefaultResourceLimit: 容器默认资源限制
  vmDefaultResourceLimit: 虚拟机默认资源限制
  resourceQuotas: 资源配额
  haveOneOwner: 至少有一名成员需要具有所有者角色。


projectMembers:
  project:
    label: 项目
  projectPermissions:
    label: 项目权限
    description: 控制用户对项目的访问权限
    noDescription: 已创建用户 - 没有描述
    searchForMember: 搜索需要向其提供项目访问权限的成员
    owner:
      label: 所有者
      description: 所有者对项目和项目内的所有资源拥有完全的控制权限。
    member:
      label: 成员
      description: 成员可以管理项目内的资源，但不能改变项目本身。
    readOnly:
      label: 只读
      description: 成员只能查看项目内的资源，但不能改变资源。
    custom:
      label: 自定义
      description: 为该用户自定义角色。
    createNs: 创建命名空间
    configmapsManage: 管理 ConfigMaps
    ingressManage: 管理 Ingress
    projectcatalogsManage: 管理项目应用商店
    projectroletemplatebindingsManage: 管理项目成员
    secretsManage: 管理密文
    serviceaccountsManage: 管理 Service Account
    servicesManage: 管理服务
    persistentvolumeclaimsManage: 管理卷
    workloadsManage: 管理工作负载
    configmapsView: 查看 ConfigMaps
    ingressView: 查看 Ingress
    monitoringUiView: 查看 Monitoring
    projectcatalogsView: 查看项目应用商店
    projectroletemplatebindingsView: 查看项目成员
    secretsView: 查看密文
    serviceaccountsView: 查看 Service Account
    servicesView: 查看服务
    persistentvolumeclaimsView: 查看卷
    workloadsView: 查看工作负载

projectNamespaces:
  createNamespace: 创建命名空间
  createProject: 创建项目
  label: 项目/命名空间
  noNamespaces: 没有定义的命名空间。
  noProjectNoNamespaces: 所有命名空间都在一个项目中
  isIstioInjectionEnabled: 为此命名空间启用了 Istio 自动 Sidecar 注入

prometheusRule:
  alertingRules:
    addLabel: 添加告警
    annotations:
      description:
        input: 描述注释值
        label: 描述
      label: 注释
      message:
        input: 消息注释值
        label: 消息
      runbook:
        input: Runbook URL 注释值
        label: Runbook URL
      summary:
        input: 概述注释值
        label: 概述
    bannerText: '触发告警时，注释和标签将被传递给配置的 Alertmanager，从而允许它们构造通知信息并发送给接收器。'
    for:
      label: 告警触发等待时间
      placeholder: '60'
    label: 告警规则
    labels:
      label: 标签
      severity:
        choices:
          critical: 严重
          label: 严重标签值
          none: 无
          warning: 警告
        label: 严重程度
    name: 告警名称
    removeAlert: 移除告警
  groups:
    add: 添加规则组
    groupRowLabel: 规则组 {index}
    groupInterval:
      label: 覆盖组间隔
      placeholder: '60'
    label: 规则组
    name: 组名称
    none: 请添加至少一个规则组，其中至少包含一个告警或记录规则。
    removeGroup: 移除组
    responseStrategy:
      label: 部分响应策略
  promQL:
    label: PromQL 表达式
  recordingRules:
    addLabel: 添加记录
    label: 记录规则
    labels: 标签
    name: 时间序列名称
    removeRecord: 移除记录

promptForceRemove:
  modalTitle: 是否确认？
  removeWarning: "删除底层基础设施时出现问题。如果你继续执行此操作，主机<b>{nameToMatch}</b>将从 Rancher 中删除。强烈建议手动删除所有引用的基础设施。"
  forceDelete: 强制删除
  confirmName: "在下面输入池名称以确认："
  podRemoveWarning: "强制删除不会等待到 Pod 的进程已确认终止。这可能会导致<strong>数据损坏或不一致</strong>。"

promptScaleMachineDown:
  attemptingToRemove: "你正在尝试删除 {count} {type}"
  retainedMachine1: Control Plane 和 Etcd 角色要求至少一台主机。
  retainedMachine2: <b>{ name }</b> 会保留

promptRemove:
  title: 是否确认？
  andOthers: |-
    {count, plural,
    =0 {.}
    =1 { 还有另<b>一个</b>。}
    other { 还有另外<b>{count}个</b>。}
    }
  attemptingToRemove: "你正在试图删除 {type}"
  attemptingToRemoveAuthConfig: "你正在尝试禁用此 Auth Provider。<br><br> 请注意，集群角色模板绑定、项目角色模板绑定、全局角色绑定、用户和 Token 都会被删除。<br><br> 你确定要继续吗？"
  protip: "提示：按住 {alternateLabel} 键的同时单击删除，以绕过此确认。"
  confirmName: "在下方输入 <b>{nameToMatch}</b> 以确认："
  deleteAssociatedNamespaces: "同时删除此项目中的命名空间："
  willDeleteAssociatedNamespaces: "项目中的所有命名空间也都会被删除："
  confirmRelatedResource: "删除 {type} 将删除这个 {type} 上的所有资源，此过程不可逆。你确定要继续删除 {names} 吗？"
  promptConfirmation: "缩减时不再提示确认。"

promptRemoveApp:
  removeCrd: "删除与此应用关联的 CRD"

promptRollback:
  modalTitle: 回滚 {workloadName}
  dropdownTitle: 回滚到修订版
  placeholder: 选择一个修订版
  attemptingToRollBack: 正在尝试回滚工作负载...
  differences: 差异
  revisionOption: "版本 {revisionNumber} 创建于 {revisionAge} {units} 前 {currentLabel}"
  currentLabel: "（当前）"
  multipleWorkloadError: "一次只能回滚一个工作负载。"
  singleRevisionBanner: 没有可用于回滚的修订版本。

promptSaveAsRKETemplate:
  title: 将 {cluster} 转换为新的 RKE 模板
  name: 集群模板名称
  description: 创建新的集群模板，并使用当前集群配置发起修改。
  warning: 此操作将对集群进行修改，即把新创建的集群模板和修改应用到集群中。此操作不能撤销。

promptRotateEncryptionKey:
  title: 轮换加密密钥
  description: 上次备份 {name} 的备份时间为 {date}
  warning: 在继续操作前，请确保已成功完成集群的 ETCD 备份。
  error: 未找到备份

rancherAlertingDrivers:
  msTeams: 启用 Microsoft Teams 通知
  sms: 启用短信通知
  selectOne: 你需要从以下选项中选择至少一个。

rbac:
  roleBinding:
    noData: 没有与此资源关联的成员。
    user:
      label: 用户名
    role:
      label: 角色
    add: 添加成员
  displayRole:
    fleetworkspace-admin: 管理员
    fleetworkspace-member: 成员
    fleetworkspace-readonly: 只读用户
  members:
    label: 成员
  roletemplate:
    label: 角色
    newUserDefault:
      no: 否
      tooltip: 不影响已有角色的绑定。
    locked:
      label: 锁定
      yes: '是：不允许新绑定使用这个角色'
      no: 否
    tabs:
      grantResources:
        label: 授权资源
        noApiGroupClusterScope: 核心 K8s API，集群内
        noApiGroupNamespaceScope: 核心 K8s API，命名空间内
        deprecatedLabel: （已弃用）
        resourceOptionInfo: 并不是每个 Rancher 管理的 Kubernetes 集群中可用资源都列在了资源选项中。高级用例可能要求手动输入资源和 API 组。
        tableHeaders:
          verbs: 操作
          resources: 资源
          nonResourceUrls: 非资源 URL
          apiGroups: API 组
    subtypes:
      GLOBAL:
        createButton: 创建全局角色
        label: 全局
        yes: "是：新用户的默认角色"
        defaultLabel: 新用户的默认角色
      CLUSTER:
        createButton: 创建集群角色
        label: 集群
        yes: "是：创建新集群的默认角色"
        defaultLabel: 集群创建者的默认角色
      NAMESPACE:
        createButton: 创建项目或命名空间的角色
        label: 项目或命名空间
        yes: "是：创建新项目的默认角色"
        defaultLabel: 项目创建者的默认角色
      RBAC_ROLE:
        label: 角色
      RBAC_CLUSTER_ROLE:
        label: 集群角色
      noContext:
        label: 没有内容
  globalRoles:
    notBound: '没有绑定的用户 <i class="icon icon-checkmark" style="margin-left: 5px"></i>'
    unableToCheck: 无法检查是否存在绑定了该角色的用户，请重试。
    waiting: |-
      {count, plural,
        =1 { 检查是否存在绑定了该角色的用户 <i class="icon-spin icon icon-spinner" style="margin-left: 5px"></i> }
        other { 检查是否存在绑定了这些角色的用户 <i class="icon-spin icon icon-spinner" style="margin-left: 5px"></i> }
      }
    usersBound: |-
      {count, plural,
        =1 { 注意：有 1 个用户绑定了即将被删除的角色，是否继续操作？}
        other { 注意：有 {count} 个用户绑定了即将被删除的角色，是否继续操作？}
      }
    types:
      global:
        label: 全局权限
        description: |-
          控制 {isUser, select,
          true {用户}
          false {组}} 管理整个 {appName} 安装的权限。
      custom:
        label: 自定义
        description: '不是 {vendor} 创建的角色。'
      builtin:
        label: 内置角色
        description: 用于实现更精细的权限模型的补充角色
    unknownRole:
        description: 无描述
    assignOnlyRole: 已分配该角色
    role:
      admin:
        label: 管理员
        description: 管理员可以完全控制整个集群中的所有资源。
      user:
        label: 普通用户
        description: 普通用户可以查看集群基本信息，并管理其授权访问的命名空间和资源。
      user-base:
        label: User-Base 用户
        description: User-Base 用户只拥有登录权限。
      clusters-create:
        label: 创建集群
        description: 允许用户创建集群，并成为该集群的所有者（owner）。普通用户默认拥有此权限。
      clustertemplates-create:
        label: 创建 RKE 集群模板
        description: 允许用户创建 RKE 集群模板，并成为该模板的所有者（owner）。
      authn-manage:
        label: 配置身份认证
        description: 允许用户启用、编辑或禁用所有验证提供程序配置。
      catalogs-manage:
        label: 旧版配置应用
        description: 允许用户基于应用商店资源添加、编辑和删除management.cattle.io
      clusters-manage:
        label: 管理所有集群
        description: 允许用户管理所有集群，包括他们不是成员的集群。
      clusterscans-manage:
        label: 管理 CIS 集群扫描
        description: 允许用户运行新建的 CIS 集群扫描，并管理 CIS 集群扫描。
      kontainerdrivers-manage:
        label: 创建集群驱动
        description: 允许用户创建集群驱动，并成为该集群驱动的所有者（owner）。
      features-manage:
        label: 配置功能开关
        description: 允许用户通过功能开关设置，来启用和禁用自定义功能。
      nodedrivers-manage:
        label: 配置主机驱动
        description: 允许用户启用、配置和移除所有主机驱动设置。
      nodetemplates-manage:
        label: 管理节点模板
        description: 允许用户定义、编辑和移除节点模板。
      roles-manage:
        label: 管理角色
        description: 允许用户定义、编辑和移除角色定义。
      settings-manage:
        label: 管理配置
        description: '允许用户管理 {vendor} 配置。'
      users-manage:
        label: 管理用户
        description: 允许用户为所有用户创建、移除和设置密码。
      catalogs-use:
        label: 使用应用商店
        description: 允许用户查看和部署应用商店中的模板。普通用户默认拥有此权限。
      nodetemplates-use:
        label: 使用节点模板
        description: 允许用户使用任何现有的节点模板来部署新节点。
      view-rancher-metrics:
        label: '查看 {vendor} 指标'
        description: 允许用户通过 API 查看指标。
      base:
        label: 登录访问
      clustertemplaterevisions-create:
        label: 创建 RKE 模板修订版

resourceDetail:
  detailTop:
    annotations: 注释
    created: 创建时间
    deleted: 已删除
    description: 描述
    endpoints: 端点
    labels: 标签
    namespaces: 命名空间
    ownerReferences: |-
      {count, plural,
      =1 {所有者}
      other {所有者}}
    hideLabels: 隐藏系统标签
    showLabels: 显示所有标签
    hideAnnotations: |-
      {annotations, plural,
      =1 {隐藏1个注释}
      other {隐藏{annotations}个注释}}
    showAnnotations: |-
      {annotations, plural,
      =1 {显示1个注释}
      other {显示{annotations}个注释}}
    name: 名称
  header:
    clone: "从 {subtype} {name} 克隆"
    create: 创建 {subtype}
    import: 导入 {subtype}
    edit: "{subtype} {name}"
    stage: "从 {subtype} {name} 暂存"
    view: "{subtype} {name}"
  masthead:
    age: 存活时间
    restartCount: Pod 重启
    defaultBannerMessage:
      error: 此资源当前处于错误状态，且没有可用的详细消息。
      transitioning: 此资源当前处于转换状态，且没有可用的详细消息。
    sensitive:
      hide: 隐藏敏感信息
      show: 显示敏感信息
    namespace: 命名空间
    workspace: 工作空间
    project: 项目
    detail: 详情
    config: 配置
    graph: Graph
    yaml: YAML
    managedWarning: |-
      此 {type} 由 {hasName, select,
        no { {managedBy} 应用}
        yes { {managedBy} 应用 {appName}}} 管理。在此处所做的更改可能会在下次 {managedBy} 运行时被覆盖。
resourceList:
  head:
    create: 创建
    createFromYaml: 使用 YAML 文件创建
    createResource: "创建 {resourceName}"
  nsFiltering: "请使用上面的过滤器选择一个或多个命名空间或项目。"
  nsFilterToolTip: "仅限于过滤项目和命名空间"
resourceLoadingIndicator:
  loading: 正在加载

resourceTable:
  groupBy:
    none: 简单列表
    namespace: 按命名空间分组
    project: 按项目分组
    node: 按节点分组
    role: 按角色分组
    cluster: 按集群分组
  groupLabel:
    cluster: "<span>集群：</span> {name}"
    notInACluster: 不在集群中
    namespace: "<span>命名空间：</span> {name}"
    notInAMachinePool: "不在 Deployment 中"
    machinePool: "<span>节点池：</span> {name}"
    notInANamespace: 不在命名空间内
    notInAProject: 不在项目内
    project: "<span>项目：</span> {name}"
    notInAWorkspace: 不在工作空间内
    workspace: "<span>工作空间</span> {name}"
    notInANodePool: "不在节点池中"
    nodePool: "<span>节点池：</span> {name}"
    node: "<span>节点：</span> {name}"

resourceTabs:
  conditions:
    tab: 状况
  events:
    tab: 最近事件
  related:
    tab: 相关资源
    from: 被引用
    to: 引用


resourceYaml:
  errors:
    namespaceRequired: 这个资源是有命名空间的，所以必须提供一个命名空间。
  buttons:
    continue: 继续编辑
    edit: 编辑 YAML
    diff: 显示差异
    hideDiff: 隐藏差异
    unified: 统一
    split: 拆分

secret:
  authentication: 身份认证
  certificate:
    certificate: 证书
    certificatePlaceholder: "粘贴证书，一般以----BEGIN CERTIFICATE----开头"
    cn: 域名
    expires: 过期时间
    issuer: 发行者
    plusMore: "+ {n} 更多"
    privateKey: 私钥
    privateKeyPlaceholder: "粘贴私钥，一般以----BEGIN RSA PRIVATE KEY----开头"
  data: 数据
  registry:
    address: 镜像仓库
    domainName: 镜像仓库域名
    password: 密码
    username: 用户名
  basic:
    password: 密码
    username: 用户名
  ssh:
    keys: 密钥
    public: 公钥
    publicPlaceholder: "粘贴你的公钥"
    private: 私钥
    privatePlaceholder: "粘贴你的私钥"
  serviceAcct:
    ca: CA 证书
    token: Token
  customType: 自定义类型
  type: 类型
  types:
    'opaque': 'Opaque'
    'kubernetes.io/service-account-token': 'Svc Acct Token'
    'kubernetes.io/dockercfg': '镜像仓库'
    'kubernetes.io/dockerconfigjson': '镜像仓库'
    'kubernetes.io/basic-auth': 'HTTP 基础认证'
    'kubernetes.io/ssh-auth': 'SSH 密钥'
    'kubernetes.io/tls': 'TLS 证书'
    'bootstrap.kubernetes.io/token': 'Bootstrap Token'
    'istio.io/key-and-cert': 'Istio 证书'
    'helm.sh/release.v1': 'Helm 版本'
    'fleet.cattle.io/cluster-registration-values': 'Fleet 集群'
    'provisioning.cattle.io/cloud-credential': '云凭证'
    'rke.cattle.io/auth-config': 'RKE 认证配置'
  initials:
    'opaque': 'O'
    'kubernetes.io/service-account-token': 'SAT'
    'kubernetes.io/dockercfg': 'R'
    'kubernetes.io/dockerconfigjson': 'R'
    'kubernetes.io/basic-auth': 'HTTP'
    'kubernetes.io/ssh-auth': 'SSH'
    'kubernetes.io/tls': 'TLS'
    'bootstrap.kubernetes.io/token': 'Boot'
    'istio.io/key-and-cert': 'Ist'
    'helm.sh/release.v1': 'Helm'
    'fleet.cattle.io/cluster-registration-values': 'F'
    'provisioning.cattle.io/cloud-credential': 'CC'
    's3': 'S3'
  relatedWorkloads: 相关的工作负载
  typeDescriptions:
    custom:
      description: 使用自定义类型创建密文
    'kubernetes.io/basic-auth':
      description: '使用用户名和密码进行验证'
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#basic-authentication-secret
    'Opaque':
      description: 使用键值对的默认密文类型
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
    'kubernetes.io/dockerconfigjson':
      description: 用于拉取容器镜像的已验证仓库
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets
    'kubernetes.io/ssh-auth':
      description: 用于 SSH 认证的公钥和私钥
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets
    'kubernetes.io/tls':
      description: 存储 TLS 证书和密钥
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets

selectOrCreateAuthSecret:
  label: 身份认证
  options:
    none: 无
    basic: HTTP 基础认证
    ssh: SSH 密钥
    aws: AWS/S3
    custom: 密文名称
  s3:
    accessKey: Access Key
    secretKey: Secret Key
  ssh:
    publicKey: 公钥
    privateKey: 私钥
  basic:
    username: 用户名
    password: 密码
  namespaceGroup: "命名空间：{name}"
  chooseExisting: "选择一个现有的密文："
  createSsh: 创建 SSH 密钥密文
  createBasic: 创建 HTTP 基本身份认证密文
  createS3: 创建与 S3 兼容的身份认证密文

serviceAccount:
  automount: 自动挂载 Service Account 令牌
  imagePullSecrets: 镜像拉取密文
  tabs:
    serviceAccount:
      label: Service Account

servicePorts:
  header:
    label: 端口规则
  rules:
    listening:
      label: 监听端口
      placeholder: 例如：8080
    name:
      label: 端口名称
      placeholder: 例如：myport
    node:
      label: Node Port
      placeholder: 例如：30000
    protocol:
      label: 协议
    target:
      label: 目标端口
      placeholder: 例如：80 或 http

serviceTypes:
  clusterip: Cluster IP
  externalname: External Name
  headless: Headless
  loadbalancer: Load Balancer
  nodeport: Node Port

servicesPage:
  serviceListDescription: Service 用于定义一组可以使用单个 IP 地址和端口访问的逻辑 Pod。
  targetPorts: Service 会向这个端口发送请求，被选中的 Pod 会监听这个端口。
  listeningPorts: 该 Service 在此端口上公开。
  anyNode: 任何节点
  labelsAnnotations:
    label: 标签 & 注释
  affinity:
    actionLabels:
      clientIp: 客户端 IP
      none: 未配置会话保持
    helpText: 根据源 IP 将连接映射到一个一致的目标
    label: 会话保持
    timeout:
      label: 会话粘滞时间
      placeholder: 例如：10800
  externalName:
    define: External Name
    helpText: "External Name 用于是指定一个 DNS 名称。这是必填字段。如果要硬编码一个 IP 地址，请使用 Headless Service。"
    label: External Name
    placeholder: 例如：my.database.example.com
    input:
      label: DNS 名称
  harvester:
    title: 附加配置
    ipam:
      label: IPAM
    useShareIP:
      label: 使用共享 IP
    useIpam:
      label: 使用 IPAM
    shareIP:
      label: 共享 IP LB

  ips:
    define: 服务端口
    clusterIpHelpText: 集群 IP 地址必须在为 API server 配置的 CIDR 范围内。
    external:
      label: 外网 IP
      placeholder: 例如：1.1.1.1
      protip: IP 地址列表，集群中的节点也将使用该服务的流量。
    input:
      label: Cluster IP
      placeholder: 例如：10.43.xxx.xxx
    label: IP 地址
    loadBalancer:
      label: Load Balancer
    loadBalancerIp:
      label: Load Balancer IP
      placeholder: 例如：192.0.xxx.xxx
      helpText: 如果你指定了 loadBalancerIP 但你的云提供商不支持该功能，loadBalancerIP 字段的值会被忽略。
  pods:
    label: Pod
  ports:
    label: 端口
  selectors:
    helpText: ""
    label: 选择器
    matchingPods:
      description: 选择器的键和值用于匹配现有 Pod 上的标签和值。
      matchesSome: |-
        {matched, plural,
          =0 {与 {total, number} 个 Pod 中的 0 个匹配。如果没有创建选择器，则必须进行手动端点。}
          =1 {与 {total, number} 个 Pod 中的 1 个匹配："{sample}"}
          other {与 {total, number} 个 Pod 中的 {matched, number} 个匹配，包括 "{sample}"}
        }
  serviceTypes:
    clusterIp:
      abbrv: IP
      description: 将一组 Pod 暴露给集群中的其他 Pod。此类型的 Service 只能从集群内部访问。这是默认类型。
      label: Cluster IP
    externalName:
      abbrv: EN
      description: 创建一个使用 DNS 名称而不是选择器的 Service。这是高级用例。
      label: External Name
    headless:
      abbrv: H
      description: 创建没有 Cluster IP 或 Load Balancer 的 Service。这是高级用例。
      label: Headless
    loadBalancer:
      abbrv: LB
      description: 在底层基础设施中创建一个 Load Balancer（例如云提供商的 Load Balancer）并为该 Service 分配一个公共 IP 地址。允许外部客户端使用 Service 定义中指定的公共 IP 地址和端口访问 Service。
      label: Load Balancer
    nodePort:
      abbrv: NP
      description: "在每个节点的 IP 上以静态端口公开 Service。"
      label: Node Port
  typeOpts:
    label: Service 类型

setup:
  currentPassword: Bootstrap 密码
  confirmPassword: 确认新密码
  defaultPassword:
    intro: 这是你第一次访问 {vendor}。如果你预先设置了 Bootstrap 密码，请在此处输入。否则我们会为你生成一个随机密码。找到它：<br/><br/>
    dockerPrefix: '"docker run" 安装：'
    dockerPs: '运行<code>docker ps</code>找到你的容器 ID，然后运行：'
    dockerSuffix: ""
    helmPrefix: 'Helm 安装，运行：'
    helmSuffix: ""
  eula: 选中此框，即表示你接受<a href="https://rancher.com/eula" target="_blank" rel="noopener noreferrer nofollow">最终用户许可协议及条款和条件</a>
  newPassword: 新密码
  newUserSetPassword: 请设置强密码。建议使用生成的随机密码。你也可以自行设置。
  serverUrl:
    label: 服务器 URL
    skip: 跳过
    tip: 此 {vendor} 安装应使用什么 URL？集群中的所有节点都需要能访问该 URL。
  setPassword: 请为默认用户 <code>{username}</code>设置强密码。建议使用生成的随机密码。你也可以自行设置。
  telemetry: 允许收集<a href="{docsBase}/faq/telemetry/" target="_blank" rel="noopener noreferrer nofollow">匿名统计数据</a>，以帮我们改进 {name}。
  useManual: 设置密码
  useRandom: 使用随机生成的密码
  welcome: 欢迎使用 {vendor}！

sortableTable:
  bulkActions:
    collapsed:
      label: 操作
  actionAvailability:
    selected: "已选择 {actionable} 项"
    some: "影响 {total} 项中的 {actionable} 项"
  noData: 没有匹配项
  noRows: 没有可显示的内容。
  noActions: 没有可执行的操作。
  paging:
    generic: |-
      {pages, plural,
      =0 {无项目}
      =1 {{count} {count, plural, =1 {Item} other {Items}}}
      other {{from} - {to} of {count} Items}}
    resource: |-
      {pages, plural,
      =0 {No {pluralLabel}}
      =1 {{count} {count, plural, =1 {{singularLabel}} other {{pluralLabel}}}}
      other {{from} - {to} of {count} {pluralLabel}}}
  search: 筛选
  in: in
  addFilter: 添加筛选器
  filterFor: 筛选...
  selectCol: 选择一列
  resetFilters: 重置
  add: 添加
  tableHeader:
    noFilter: 此列无法过滤
    groupBy: 分组依据
    show: 显示

storageClass:
  actions:
    setAsDefault: 设为默认配置
    resetDefault: 重设默认设置
  parameters:
    label: 参数
  customize:
    label: 自定义
    reclaimPolicy:
      label: 回收策略
      delete: 删除卷声明时，同时删除卷和底层设备。
      retain: 保留卷以进行手动清理。
    allowVolumeExpansion:
      label: 允许拓展卷
      enabled: 启用
      disabled: 禁用
    volumeBindingMode:
      label: 卷绑定模式
      now: 在创建 PersistentVolumeClaim 时，立即绑定并配置一个持久卷
      later: 创建了使用 PersistentVolumeClaim 的 Pod 之后，再绑定并配置一个持久卷
    mountOptions:
      label: 挂载选项
      addLabel: 添加选项
  aws-ebs:
    title: Amazon EBS 磁盘
    volumeType:
      label: 卷类型
      gp2: GP2 - 通用 SSD
      gp3: GP3 - 通用 SSD
      io1: IO1 - 预配置 IOPS SSD
      st1: ST1 - 吞吐量优化型 HDD
      sc1: SC1 - 冷存储 HDD
      provisionedIops:
        label: 预配置 IOPS
        suffix: 每秒，每GB
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    availabilityZone:
      label: 可用区
      automatic: '自动选择：选择节点所在区域作为可用区'
      manual: '手动：自行指定可用区'
      placeholder: us-east-1d, us-east-1c
    encryption:
      label: 加密
      enabled: 启用
      disabled: 禁用
    keyId:
      label: 用于加密的 KMS 密钥 ID
      automatic: '自动：生成密钥'
      manual: '手动：使用指定的密钥（full ARN）'
  azure-disk:
    title: Azure 磁盘
    storageAccountType:
      label: Storage Account 类型
      placeholder: 例如：Standard_LRS
    kind:
      label: 类型
      shared: 共享（非托管磁盘）
      dedicated: 专用（非托管磁盘）
      managed: 托管
  azure-file:
    title: Azure 文件
    skuName:
      label: Sku 名称
      placeholder: 例如：Standard_LRS
    location:
      label: 位置
      placeholder: 例如：eastus
    storageAccount:
      label: Storage Account
      placeholder: 例如：azure_storage_account_name
  gce-pd:
    title: Google 持久磁盘
    volumeType:
      label: 卷类型
      standard: 标准
      ssd: SSD
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    availabilityZone:
      label: 可用区
      automatic: '自动选择：选择节点所在区域作为可用区'
      manual: '手动：自行指定可用区'
      placeholder: us-east-1d, us-east-1c
    replicationType:
      label: 副本类型
      zonal: 可用区
      regional: 区域
  longhorn:
    title: Longhorn (CSI)
    addLabel: 添加参数
  vsphere-volume:
    title: VMWare vSphere 卷
    diskFormat:
      label: 磁盘格式
      thin: Thin
      zeroedthick: Zeroed Thick
      eagerzeroedthick: Eager Zeroed Thick
    storagePolicyName:
      label: 存储策略名称
      placeholder: 例如：gold
    datastore:
      label: Datastore
      placeholder: 例如：VSANDatastore
    hostFailuresToTolerate:
      label: 容忍主机失败的次数
      placeholder: 例如：2
    cacheReservation:
      label: 缓存预留的大小
      placeholder: 例如：20
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext3
  custom:
    addLabel: 添加参数
  glusterfs:
    title: Gluster 卷
    restUrl:
      label: REST URL
      placeholder: 例如：http://127.0.0.1:8081
    restUser:
      label: REST 用户
      placeholder: 例如：admin
    restUserKey:
      label: REST 用户密钥
      placeholder: 例如：password
    secretNamespace:
      label: 密文所在的命名空间
      placeholder: 例如：default
    secretName:
      label: 密文名称
      placeholder: 例如：heketi-secret
    clusterId:
      label: 集群 ID
      placeholder: 例如：630372ccdc720a92c681fb928f27b53f
    gidMin:
      label: GID MIN
      placeholder: 例如：40000
    gidMax:
      label: GID MAX
      placeholder: 例如：50000
    volumeType:
      label: 卷类型
      placeholder: "例如：replicate:3"
  cinder:
    title: Openstack Cinder 卷
    volumeType:
      label: 卷类型
      placeholder: 例如：fast
    availabilityZone:
      label: 可用区
      automatic: "自动选择：选择节点所在区域作为可用区"
      manual:
        label: "手动：自行指定可用区"
        placeholder: 例如：nova
  rbd:
    title: Ceph RBD
    monitors:
      label: 监控
      placeholder: 例如：10.16.153.105:6789
    adminId:
      label: Admin ID
      placeholder: 例如：kube
    adminSecretNamespace:
      label: Admin 密文所在的命名空间
      placeholder: 例如：kube-system
    adminSecret:
      label: Admin 密文
      placeholder: 例如：Secret
    pool:
      label: 池
      placeholder: 例如：kube
    userId:
      label: 用户 ID
      placeholder: 例如：kube
    userSecretNamespace:
      label: 用户密文所在的命名空间
      placeholder: 例如：default
    userSecretName:
      label: 用户密文名称
      placeholder: 例如：ceph-secret-user
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    imageFormat:
      label: 镜像格式
      placeholder: 例如：2
    imageFeatures:
      label: 镜像功能
      placeholder: 例如：layering
  quobyte:
    title: Quobyte 卷
    quobyteApiServer:
      label: Quobyte API server
      placeholder: "例如：http://138.68.74.142:7860"
    registry:
      label: 镜像仓库
      placeholder: 例如：138.68.74.142:7861
    adminSecretNamespace:
      label: Admin 密文所在的命名空间
      placeholder: 例如：kube-system
    adminSecretName:
      label: Admin 密文名称
      placeholder: 例如：quobyte-admin-secret
    user:
      label: 用户名
      placeholder: 例如：root
    group:
      label: 组
      placeholder: 例如：root
    quobyteConfig:
      label: Quobyte 配置
      placeholder: 例如：BASE
    quobyteTenant:
      label: Quobyte 租户
      placeholder: 例如：DEFAULT
  portworx-volume:
    title: Portworx 卷
    filesystem:
      label: 文件系统
      placeholder: 例如：ext4
    blockSize:
      label: 块大小
      placeholder: 例如：32
    repl:
      label: Repl
      placeholder: 例如：1; 0 代表整个设备
    ioPriority:
      label: I/O 优先级
      placeholder: 例如：low
    snapshotsInterval:
      label: 快照间隔
      placeholder: 例如：70
    aggregationLevel:
      label: 聚合度
      placeholder: 例如：0
    ephemeral:
      label: 是否临时
      placeholder: 例如：true
  scaleio:
    title: ScaleIO 卷
    gateway:
      label: 网关
      placeholder: 例如：https://192.168.99.200:443/api
    system:
      label: 系统
      placeholder: 例如：scaleio
    protectionDomain:
      label: 保护域
      placeholder: 例如：pd0
    storagePool:
      label: 存储池
      placeholder: 例如：sp1
    storageMode:
      label: 存储模式
      thin: 精简预配
      thick: 厚预配
    secretRef:
      label: 密文 Ref
      placeholder: 例如：sio-secret
    readOnly:
      label: 只读
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：xfs
  storageos:
    title: StorageOS
    pool:
      label: 池
      placeholder: 例如：default
    description:
      label: 描述
      placeholder: 例如：Kubernetes 卷
    filesystemType:
      label: 文件系统类型
      placeholder: 例如：ext4
    adminSecretNamespace:
      label: Admin 密文所在的命名空间
      placeholder: 例如：default
    adminSecretName:
      label: Admin 密文名称
      placeholder: 例如：storageos-secret
  no-provisioner:
    title: 本地存储
  deprecated:
    title: （已弃用）
    warning: '{provisioner} 树内插件已弃用。你可以在<a target="_blank" rel="noopener noreferrer nofollow" href="https://kubernetes-csi.github.io/docs/drivers.html">这里</a>查找 CSI 驱动。'
  local-path-provisioner:
    title: Local Path 驱动 (CSI)

tableHeaders:
  assuredConcurrencyShares: 确保并发份额
  accessKey: Access Key
  addressType: 地址类型
  accessModes: 访问模式
  address: 地址
  age: 存活时间
  apiGroup: API 组
  apikey: API 密钥
  available: 可用
  attachedVM: 挂载的虚拟机

  authRoles:
    globalDefault: 新用户的默认角色
    clusterDefault: 集群创建者的默认角色
    projectDefault: 项目创建者的默认角色
  branch: 分支
  backupTarget: 备份路径
  builtIn: 内置
  bundlesReady: 就绪 Bundle
  bundleDeploymentsReady: Deployment
  builtin: 内置
  chart: Chart
  capacity: 容量
  current: 当前
  clusterCreatorDefault: 集群创建者的默认角色
  clusterFlow: Cluster Flow
  clusterOutput: 集群输出
  cluster: 集群
  clusters: 集群
  cluster-Name: 集群
  clustersReady: 就绪集群
  clusterGroups: 集群组
  commit: Commit
  condition: 状态
  constraint: 约束
  completions: 完成 Job 历史数
  count: 数量
  createdAt: 创建于
  customVerbs: 自定义操作
  description: 描述
  expires: 过期时间
  cpu: CPU
  currentReplicas: 当前副本数
  date: 日期
  data: 数据
  default: 默认
  desired: 期望
  defaultVersion: 默认版本
  destination: 目标
  deployed: 已部署
  download: 下载
  duration: 持续时间
  diskState: 磁盘状态
  drivers: 驱动
  distinguisherMethod: 区分方法
  effect: 效果
  endpoints: 端点
  firstSeen: 首次出现时间
  fleetBundleType: 类型
  flow: Flow
  fingerprint: 唯一标识
  gitRepos: Git 仓库
  groups: 组
  groupName: 组名称
  groupRoleNames: 组角色名称
  global-Default: 全局默认
  host: 主机
  hostIp: 主机 IP
  holder: 持有者
  hpaReference: 工作负载
  health: 健康
  handSize: Hand Size
  ipAddress: IP 地址
  id: ID
  iP: IP
  image: 镜像
  imageSize: 大小
  ingressClass: IngressClass
  ingressDefaultBackend: 默认
  ingressTarget: 目标
  internalExternalIp: 外网 IP/内网 IP
  ipaddress: IP 地址
  internalIpSameAsExternal: 与外网 IP 相同
  jobs: Job
  key: 键
  keys: 数据
  labels: 标签
  lastUpdated: 最后更新时间
  lastSchedule: 最后调度时间
  lastSeen: 最后出现
  lastSeenTooltip: 最近一次记录此事件的时间
  loggingOutputProviders: 提供商
  machines: 主机
  machineNodeName: 节点
  manual: 手动
  matches: 匹配
  matchingPrecedence: 匹配优先级
  maxKubernetesVersion: 最大 Kubernetes 版本
  message: 消息
  minKubernetesVersion: 最低 Kubernetes 版本
  minReplicas: 最小副本数
  maxReplicas: 最大副本数
  missingPL: 缺少 PL
  memory: 内存
  monitored: 已监控
  name: 名称
  nameDisplay: 显示名称
  nameUnlinked: 名称
  namespace: 命名空间
  namespaceName: 名称
  namespaceNameUnlinked: 名称
  networkType: 类型
  networkVlan: Vlan ID
  node: 节点
  nodeName: 节点名称
  nodesReady: 就绪节点
  nodePort: Node Port
  object: 对象
  operatingSystem: 操作系统
  output: 输出
  p95: 95 百分位数
  persistentVolumeClaim: 持久卷声明
  persistentVolumeSource: 源
  phase: 阶段
  progress: 进度
  podImages: 镜像
  podRestarts: 重启次数
  pods: Pod
  pod-Selector: Pod 选择器
  providers: 提供商
  providerID: 提供商 ID
  port: 端口
  ports: 端口
  project: 项目
  protocol: 协议
  provider: 提供商
  priorityLevel: 优先级
  publicPorts: 公共端口
  queues: 队列
  queueLengthLimit: 队列长度限制
  ram: 内存（RAM）
  rbac:
    create: Create
    delete: Delete
    get: Get
    list: List
    patch: Patch
    update: Update
    watch: Watch
  ready: 就绪
  reason: 原因
  receivers: 接收器
  receiverTypes: 接收器类型
  reclaimPolicy: 回收策略
  registrationNamespace: 注册命名空间
  repo: 仓库
  repositories: 仓库
  repoName: 仓库名称
  reposReady: 就绪仓库
  replicas: 副本数量
  reqRate: 请求频率
  resource: 资源
  resources: 资源
  resourcesReady: 就绪资源
  restarts: 重启次数
  restart: 需要重启
  role: 角色
  roles: 角色
  routes: 路由
  routeConnectivity: 路由连接
  readyToUse: 可用
  scale: 比例
  scope: 范围
  selector: 选择器
  secrets: 密文
  schedule: 调度
  service: 服务
  serviceAccounts: Service Account
  secret-Name: 密文名称
  simpleName: 名称
  simpleScale: 比例
  simpleType: 类型
  size: 大小
  started: 已开始
  state: 状态
  status: 状态
  targetVm: 目标虚拟机
  storage_class_provisioner: 提供商
  storage: 存储大小
  storageClass: 存储类
  source: 源
  subject: 主题
  subType: 类型
  success: 成功
  summary: 概述
  subobject: 子对象
  taints: 污点
  target: 目标
  targetKind: 目标类型
  targetPort: 目标
  template: 模板
  type: 类型
  updated: 更新时间
  up-to-date: 最新
  upgrade: 可升级
  url: URL
  users: 用户
  userDisplayName: 显示名称
  userId: ID
  userStatus: 状态
  username: 本地用户名
  value: 值
  version: 版本
  volume: 卷
  volumeMode: 卷模式
  weight: 权重
target:
  router:
    label: 路由
    placeholder: 选择路由
  service:
    label: 服务
    placeholder: 选择服务
  title: 目标
  version:
    label: 版本
    placeholder: 选择版本

user:
  detail:
    username: 用户名
    globalPermissions:
      label: 全局权限
      description: 管理影响整个安装的资源的权限
      adminMessage: 该用户是一个管理员，拥有所有权限
      tableHeaders:
        permission: 权限
    clusterRoles:
      label: 集群角色
      description: 授予一个用户在各个集群中的角色
      tableHeaders:
        cluster: 集群
    projectRoles:
      label: 项目角色
      description: 授予一个用户在各个项目中的角色
      tableHeaders:
        project: 项目
    generic:
      tableHeaders:
        role: 角色
        granted: 授予
  edit:
    isActive: 启用
    credentials:
      label: 凭证
      username:
        label: 用户名
        placeholder: 例如：jsmith
        exists: '用户名已被使用。请选择一个新的用户名。'
      displayName:
        label: 显示名称
        placeholder: 例如：John Smith
      userDescription:
        label: 描述
        placeholder: 例如：这是 John Smith 的账号。
  list:
    errorRefreshingGroupMemberships: 刷新组成员名单时出错
validation:
  noUpperCase: '"{key}" 中的字母数字字符必须为小写'
  arrayLength:
    between: '"{key}" 应该包含 {min} 至 {max} {max, plural, =1 {项} other {项}}'
    exactly: '"{key}" 应该包含 {count, plural, =1 {#项} other {#项}}'
    max: '"{key}" 最多可包含 {count} {count, plural, =1 {项} other {项}}'
    min: '"{key}" 至少要包含 {count} {count, plural, =1 {项} other {项}}'
  boolean: '"{key}" 必须是个布尔值。'
  chars: '"{key}" 包含 {count, plural, =1 {1个无效字符} other {#个无效字符}}: {chars}'
  cluster:
    name: 集群名称不能设为"local"或采用"c-xxxxx"形式。
  conflict: |-
    此资源在你开始编辑之后已被修改，某些修改与你的更改冲突。
    此屏幕已更新以反映集群上的当前值。查看并再次应用你想要的更改，然后再次保存。
    冲突{fieldCount, plural, =1 {字段} other {字段}}：{fields}
  custom:
    missing: '{ validatorName } 不存在校验。请检查校验是否存在于自定义校验中，以及名称是否拼写正确。'
  dns:
    doubleHyphen: '"{key}" 不能包含两个或两个以上连续的连字符"-"'
    hostname:
      empty: '"{key}" 至少包含一个字符'
      emptyLabel: '"{key}" 不能包含两个连续的点“.”'
      endDot: '"{key}" 不能以点“.”结束'
      endHyphen: '"{key}" 不能以连字符“-”结束'
      startDot: '"{key}" 不能以点“.”开始'
      startHyphen: '"{key}" 不能以连字符“-”开始'
      startNumber: '"{key}" 不能以数字开始'
      tooLong: '"{key}" 的长度不能超过{max}个字符'
      tooLongLabel: '"{key}" 不能包含超过 {max} 字符的部分'
    label:
      endDot: '"{key}" 不能以点“.”结束'
      startDot: '"{key}" 不能以点“.”开始'
      emptyLabel: '"{key}" 不能为空'
      endHyphen: '"{key}" 不能以连字符“-”结束'
      startHyphen: '"{key}" 不能以连字符“-”开始'
      startNumber: '"{key}" 不能以数字开始'
      tooLongLabel: '"{key}" 的长度不能超过{max}个字符'
  flowOutput:
    both: 需要选择 "输出" 或 "集群输出"。
    global: 需要选择“集群输出”。
  output:
    logdna:
      apiKey: 需要设置“API 密钥”。
  invalidCron: 无效的 cron 调度
  invalidCidr: "无效的 CIDR"
  invalidIP: "无效的 IP"
  invalidChartRepo: "无效的 Chart 仓库地址"
  k8s:
    name: 必须由小写字母数字或“-”组成，并且开头和结尾必须是字母数字（例如“my-name”或“123-abc”）。
    identifier:
      emptyLabel: '"{key}" 不能有空键'
      emptyPrefix: '"{key}" 不能有空前缀'
      endLetter: '"{key}" 末位必须是字母或数字'
      startLetter: '"{key}" 首位必须是字母或数字'
      tooLongKey: '"{key}" 的长度不能超过 {max} 个字符'
      tooLongPrefix: '"{key}" 前缀的长度不能超过 {max} 个字符'
  minLength: '"{key}" 必须多于 {min} 个字符'
  maxLength: '"{key}" 必须少于 {max} 个字符'
  minValue: '"{key}" 必须等于或多于 {min}'
  maxValue: '"{key}" 必须等于或少于 {max}'
  betweenLengths: '"{key}" 必须包含 {min} 到 {max} 个字符'
  betweenValues: '"{key}" 必须介于 {min} 和 {max} 之间'
  noSchema: 没有找到可以验证的 schema
  noType: 没有可验证的类型
  number:
    requiredInt: '"{key}" 必须是整数'
    isPositive: '"{key}" 必须是正数'
    isOctal: '"{key}" 不能有前导零'
    between: '"{key}" 的长度必须在 {min} 和 {max}之间'
    exactly: '"{key}" 需要设为 {val}'
    max: '"{key}" 最多可以是 {val}'
    min: '"{key}" 至少需要是 {val}'
  podAffinity:
    affinityTitle: Pod 亲和性
    antiAffinityTitle: Pod 反亲和性
    requiredDuringSchedulingIgnoredDuringExecution: 所需规则
    preferredDuringSchedulingIgnoredDuringExecution: 首选规则
    topologyKey: "{group} {rules} 的规则 [{index}] - 拓扑键是必需的。"
    matchExpressions:
      operator: "{group} {rules} 的规则 [{index}] - 运算符必须是'In'， 'NotIn'，'Exists'，或'DoesNotExist'中的其中一个"
      valueMustBeEmpty: "{group} {rules} 的规则 [{index}] - 如果运算符是'Exists'或'DoesNotExist'，值必须为空"
      valuesMustBeDefined: "{group} {rules} 的规则 [{index}] - 如果运算符是'In'或'NotIn'，必须定义值"
  port: 端口号的取值范围是1到65535。
  path: '"{key}" 必须是绝对路径'
  prometheusRule:
    noEdit: 名称中的字符无效，可能无法编辑此 PrometheusRule。
    groups:
      required: 至少需要一个规则组。
      singleAlert: 规则可以包含告警规则或记录规则，但不能同时包含两者。
      valid:
        name: '规则组{index}需要名称。'
        rule:
          alertName: '规则组{groupIndex}的规则{ruleIndex}需要告警名称。'
          expr: '规则组{groupIndex}的规则{ruleIndex}需要 PromQL 表达式。'
          labels: '规则组{groupIndex}的规则{ruleIndex}至少需要一个标签。建议使用严重程度作为标签。'
          recordName: '规则组{groupIndex}的规则{ruleIndex}需要一个时间序列名称。'
        singleEntry: '规则组{index}至少需要有一个告警规则或一个记录规则。'
  required: '"{key}" 是必填项。'
  invalid: '无效的 "{key}"'
  requiredOrOverride: '"{key}" 是必填项，或必须允许覆盖。'
  roleTemplate:
    roleTemplateRules:
      missingVerb: 你必须为每个授予资源指定至少一个动作。
      missingResource: 你必须为每个授予资源指定一个资源。
      missingApiGroup: 你必须为每个授予资源指定一个 API 组。
      missingOneResource: 你必须为每个授予资源指定至少一个资源、非资源 URL 或 API 组。
  service:
    externalName:
      none: 使用 ExternalName Service 时，External Name 是必填项。
    ports:
      name:
        required: '端口规则 [{position}] - 端口名称是必填项。'
      nodePort:
        requiredInt: '端口规则 [{position}] - 如果包含 Node Port，Node Port 必须是整数。'
        between: '端口规则 [{position}] - Node Port 的取值范围是：1-65535'
      port:
        required: '端口规则 [{position}] - 端口是必填项，'
        requiredInt: '端口规则 [{position}] - 如果包含端口，端口必须是整数。'
        between: '端口规则 [{position}] - 端口的取值范围是：1-65535'
      targetPort:
        between: '端口规则 [{position}] - 目标端口的取值范围是：1-65535'
        iana: '端口规则 [{position}] - 目标端口必须是 IANA 服务名称或整数'
        ianaAt: '端口谷子额 [{position}] - 目标端口 '
        required: '端口规则[{position}] - 目标端口是必填项。'
  setting:
    serverUrl:
      https: server-url 必须是 https。
  stringLength:
    between: '"{key}" 的长度必须是 {min} 到 {max} {max, plural, =1 {字符} other {字符}}'
    exactly: '"{key}" 的长度必须是 {count, plural, =1 {#字符} other {#字符}}'
    max: '"{key}" 最多可以包含 {count} {count, plural, =1 {字符} other {字符}}'
    min: '"{key}" 最少需要包含 {count} {count, plural, =1 {字符} other {字符}}'
  targets:
    missingProjectId: 必须为目标选定一个项目。
  monitoring:
    route:
      match: 必须选择至少一个匹配或匹配正则表达式。
      interval: '"{key}" 必须是以数字后跟单位（如 1h, 2m, 30s）的格式。'
  tab: "此选项卡中的一个或多个字段包含表单验证错误"

wizard:
  previous: 上一步
  finish: 完成
  next: 下一步
  step: "步骤 {number}"
  edit: 编辑
  create: 创建
  view: 查看
wm:
  connection:
    connected: 已连接
    connecting: 正在连接&hellip;
    disconnected: 已断开连接
    error: 错误
  containerLogs:
    clear: 清除
    containerName: "容器：{label}"
    download: 下载
    follow: 回到底部
    noData: 当前范围内没有可显示的日志项目
    noMatch: 没有符合当前过滤条件的数据
    previous: 使用前一个容器
    range:
      all: 全部
      hours: |-
        {value, number}
        {value, plural,
        =1 {小时}
        other {小时}
        }
      label: 显示最后一个
      lines: "{value, number} 行"
      minutes: |-
        {value, number} {value, plural,
        =1 {分钟}
        other {分钟}
        }
    search: 筛选
    timestamps: 显示时间戳
    wrap: 自动换行
  containerShell:
    clear: 清除
    containerName: "容器：{label}"
    failed: "无法打开容器 shell（所有 shell 命令均未成功）\n\r"
  kubectlShell:
    title: "Kubectl: {name}"

workload:
  container:
    command:
      addEnvVar: 添加变量
      args: 参数
      as: 作为
      command: 命令
      env: 环境变量
      fromResource:
        key:
          label: 键
          placeholder: "例如：metadata.labels['<KEY>']"
        name:
          label: 变量名
          placeholder: "例如：FOO"
        prefix: 前缀
        source:
          label: 源
          placeholder: 例如：my-container
        secret: 密文
        configMap: ConfigMap
        containerName: 容器名称
        type: 类型
        value:
          label: 值
          placeholder: 例如：bar
      tty: TTY
      workingDir: 工作目录
      stdin: 标准输入
    containerName: 容器名称
    healthCheck:
      checkInterval: 检查间隔
      command:
        command: 运行命令
      failureThreshold: 失败阈值
      httpGet:
        headers: 请求头
        path: 请求路径
        port: 检查端口
      initialDelay: 初始延迟
      livenessProbe: 存活检查
      livenessTip: 当该检查失败时，将重新启动容器。大多数情况下不推荐。
      noHealthCheck: "没有给容器配置存活、就绪或启动检查。"
      readinessProbe: 就绪检查
      readinessTip: 当该检查失败时，会将容器从服务端点中移除（推荐）。
      startupProbe: 启动检查
      startupTip: 容器会在此检查成功后，再尝试进行其他健康检查。
      successThreshold: 成功阈值
      timeout: 超时
      kind:
        none:  无
        HTTP:  HTTP 请求返回成功的状态（200-399）
        HTTPS: HTTPS 请求返回成功的状态
        tcp:   成功启动 TCP 连接
        exec:  容器内运行的命令以 0 状态退出
    image: 容器镜像
    imagePullPolicy: 镜像拉取策略
    imagePullSecrets: 拉取密文
    init: 初始化容器
    lifecycleHook:
      postStart:
        label: postStart
        add: 添加 postStart 钩子
      preStop:
        label: PreStop
        add: 添加 PreStop 钩子
      exec:
        title: 执行
        add: 添加要执行的命令
        command:
          label: 命令
          placeholder: "例如：sh -c 'sleep 10'"
      httpGet:
        title: HttpGet
        add: 创建 HTTP 请求
        host:
          label: 主机 IP
          placeholder: 例如：172.17.0.2
        path:
          label: 路径
          placeholder: 例如：app/bin/endpoint?param=value
        port:
          label: 端口
          placeholder: 例如：3000
        scheme:
          label: Scheme
          placeholder: 例如：HTTP
      httpHeaders:
        title: HTTP 头部
        name:
          label: 名称
          placeholder: 例如：accept-ranges
        value:
          label: 值
          placeholder: 例如：bytes
      tcpSocket:
        title: TCPSocket
        add: 打开 TCP socket
        host:
          label: 主机
          placeholder: 例如：192.168.0.1
        port:
          label: 端口
          placeholder: 例如：80
    name: 容器名称
    noResourceLimits: 没有配置资源需求。
    noPorts: 没有配置端口。
    noServiceAccess: 没有创建或管理服务的权限
    ports:
      expose: 网络
      description: '定义一个 Service 来公开容器，或者定义一个非功能性命名的端口，以便知道容器中的应用程序应该在哪里运行。'
      detailedDescription: 如果选择了 ClusterIP、LoadBalancer 或 NodePort，则会自动创建一个 Service，该 Service 将使用标签来选择此工作负载中的 Pod。
      toolTip: '如需获取在 Kubernetes 上公开工作负载的帮助，请参阅 Service 相关的 Kubernetes 官方文档。你还可以通过选择标签手动创建 Service 来公开 Pod，并且可以使用 Ingress 将 HTTP 路由映射到 Service。'
      createService: Service 类型
      noCreateService: 不创建服务
      containerPort: 私有容器端口
      hostIP: 主机 IP
      hostPort: 公共主机端口
      name: 名称
      protocol: 协议
      listeningPort: 监听端口
    removeContainer: 移除容器
    addContainer: 添加容器
    security:
      addCapabilities: 添加 Capabilities
      addGroupIDs: 添加组 ID
      allowPrivilegeEscalation:
        label: 允许权限提升
        'false': 否
        'true': "是：容器可以获得比其父进程更多的权限。"
      dropCapabilities: 移除 Capabilities
      fsGroup: 文件系统组
      hostIPC: 使用主机 IPC 命名空间
      hostPID: 使用主机 PID 命名空间
      podFsGroup: Pod 文件系统组
      privileged:
        label: Privileged
        'false': 否
        'true': "是：容器可以完全访问主机"
      readOnlyRootFilesystem:
        label: 只读根文件系统
        'false': 否
        'true': "是：容器有一个只读的根文件系统"
      runAsGroup: 以组 ID 运行
      runAsNonRoot:
        label: 以非 Root 方式运行
        'false': 否
        'true': "是：容器必须以非 Root 用户的身份运行"
      runAsNonRootOptions:
        noOption: "否"
        yesOption: "是：容器必须以非 Root 用户身份运行"
      runAsUser: 以用户 ID 运行
      shareProcessNamespace: 共享单一进程命名空间
      supplementalGroups: 其他组 ID
      sysctls: Sysctls
      sysctlsKey: 名称
    standard: 标准容器
    terminationState: "Last state: Terminated with {lsExitCode}: {lsDescription}, started: {lsStartedAt}, finished: {lsFinishedAt}"
    titles:
      pods: Pod
      container: 容器
      command: 命令
      containers: 容器
      env: 环境变量
      events: 事件
      general: 通用
      healthCheck: 健康检查
      image: 镜像
      lifecycle: 生命周期钩子
      networking: 网络
      networkSettings: 网络设置
      podAnnotations: Pod 注释
      podLabels: Pod 标签
      metrics: 指标
      podScheduling: Pod 调度
      nodeScheduling: 节点调度
      ports: 端口
      resources: 资源
      securityContext: 安全性上下文
      status: 状态
      volumeClaimTemplates: 卷声明模板
      upgrading: 扩缩容和升级策略
  cronSchedule: 调度
  detail:
    services: 服务
    ingresses: Ingress
    cannotViewServices: 没有列出 Service 的权限。
    cannotFindServices: 找不到从该工作负载中选择 Pod 的 Service。
    serviceListCaption: "以下 Service 从该工作负载中选择 Pod："
    cannotViewIngresses: 没有列出 Ingress 的权限。
    cannotFindIngresses: 找不到将流量转发到在该工作负载中选择 Pod 的 Service 的 Ingress。
    ingressListCaption: "以下 Ingress 将流量转发到从该工作负载中选择 Pod 的 Service："
    cannotViewIngressesBecauseCannotViewServices: 没有查看 Service 的权限，因此无法找到相关的 Ingress。
    pods:
      title: Pod
  detailTop:
    node: 节点
    podIP: Pod IP
    podRestarts: Pod 重启
    workload: 工作负载
    pods: 按状态划分的 Pod
    runs: 运行
  gaugeStates:
    succeeded: 成功
    running: 运行中
    failed: 失败
  hideTabs: '隐藏高级选项'
  job:
    activeDeadlineSeconds:
      label: 活动终止时间
      tip: 在系统试图终止 job 前，job 处于活动状态的可能时长。
    backoffLimit:
      label: 重试次数限制
      tip: 标记此 Job 失败之前的重试次数。
    completions:
      label: 完成 Job 历史数
      tip: Job 应该成功运行的完成 Pod 数
    failedJobsHistoryLimit:
      label: 失败 Job 历史数
      tip: 要保留的失败但已完成的 job 数
    parallelism:
      label: 并发数
      tip: Job 在给定时间应同时运行的 Pod 的最大数量。
    startingDeadlineSeconds:
      label: 运行 Job 的截止时间（秒）
      tip: 如果 Job 错过了调度时间，再次尝试运行 Job 的截止时间，单位是秒
    successfulJobsHistoryLimit:
      label: 成功 Job 历史数
      tip: 保留成功完成 Job 的数量
    suspend: 暂停
  list:
    errorCannotScale: 无法对 {workloadName} {direction, select, up { 扩容 } down { 缩容 } }
  metrics:
    pod: Pod 指标
    metricsView: 指标视图
  networking:
    dnsPolicy:
      label: DNS 策略
      options:
        clusterFirst: 集群优先
        clusterFirstWithHostNet: 集群优先使用主机网络
        default: 默认
        none: 无
      placeholder: 选择策略...
    hostAliases:
      add: 添加别名
      keyLabel: IP 地址
      keyPlaceholder: 例如：1.1.1.1
      label: 主机别名
      tip: 要注入容器的其他 /etc/hosts 条目。
      valueLabel: 主机名
      valuePlaceholder: "例如：foo.com, bar.com"
    hostname:
      label: 主机名
      placeholder: 例如：web
    nameservers:
      add: 添加名称服务器
      label: 名称服务器
      placeholder: 例如：1.1.1.1
    networkMode:
      label: 网络模式
      options:
        hostNetwork: 主机网络
        normal: 常规
      placeholder: 选择模式...
    dns: DNS
    resolver:
      label: 解析器选项
      add: 添加选项
    searches:
      add: 添加搜索域
      label: 搜索域
      placeholder: 例如：mycompany.com
    subdomain:
      label: 子域
      placeholder: 例如：web
  normanWarning: 这个工作负载似乎是在旧版 Rancher UI 中创建的。你可能需要手动删除为其自动创建的服务。
  validation:
    containers: 容器
    containerImage: 容器 {name} - "容器镜像" 是必填项。
  replicas: 副本数量
  showTabs: '显示高级选项'
  scheduling:
    activeDeadlineSeconds: 判定 Pod 是否活跃的截止时间
    activeDeadlineSecondsTip: 系统将 Pod 判定为失败，并终止其关联容器前的等待时长
    affinity:
      addNodeSelector: 添加节点选择器
      anyNode: 在任何可用节点上运行 Pod
      affinityTitle: 在选择器匹配的节点上运行 Pod
      antiAffinityTitle: 在不与选择器匹配的节点上运行 Pod
      affinityOption: 亲和性
      antiAffinityOption: 反亲和性
      matchFields:
        label: 字段
      matchExpressions:
        label: 表达式
        addRule: 添加规则
        doesNotExist: 未设置
        exists: 已设置
        greaterThan: ">"
        in: 在列表中
        inNamespaces: "特定命名空间"
        key: 键
        lessThan: <
        matchType: 匹配类型
        namespaces: 命名空间
        notIn: 不在列表中
        operator: 运算符
        value: 值
        weight: 权重
      noPodRules: 没有配置 Pod 调度策略
      nodeName: 节点名称
      priority: 优先级
      preferAny: "倾向于任何一种："
      preferred: 首选
      required: 必须
      requireAny: "需要以下任何一种："
      schedulingRules: 在匹配调度规则的节点上运行 Pod
      specificNode: 在指定节点上运行 Pod
      thisPodNamespace: 此 Pod 的命名空间
      allNamespaces: 所有命名空间
      topologyKey:
        label: 拓扑键
        placeholder: 例如：failure-domain.beta.kubernetes.io/zone
      type: 类型
      weight:
        label: 权重
        placeholder: 权重范围：1-100
    priority:
      className: 优先级名称
      priority: 优先级
    terminationGracePeriodSeconds: 终止宽限期
    terminationGracePeriodSecondsTip: 终止 Pod 运行前的宽限期
    titles:
      advanced: 高级选项
      nodeScheduling: 节点调度
      nodeSelector: 具有以下标签的节点
      podScheduling: Pod 调度
      priority: 优先级
      tab: 调度
      tolerations: 容忍度
      limits: 限制和预留
    tolerations:
      addToleration: 添加容忍度
      effect: 效果
      effectOptions:
        all: 全部
        noExecute: 不执行
        noSchedule: "不调度"
        preferNoSchedule: 倾向于不调度
      labelKey: 键
      operator: 运算符
      operatorOptions:
        equal: =
        exists: 存在
      tolerationSeconds: "容忍（秒）"
      value: 值
  serviceAccountName:
    label: Service Account 名称
    createMessage: 此命名空间中不存在服务名称 [ {name} ]，请手动创建它。
  serviceName: 服务名称
  storage:
    subtypes:
      secret: 密文
      configMap: ConfigMap
      hostPath: Bind-Mount
      persistentVolumeClaim: 持久卷声明
      createPVC: 创建持久卷声明
      csi: CSI
      nfs: NFS
      awsElasticBlockStore: Amazon EBS 磁盘
      azureDisk: Azure 磁盘
      azureFile: Azure 文件
      gcePersistentDisk: Google 持久磁盘
      driver.longhorn.io: Longhorn
      vsphereVolume: VMWare vSphere 卷
      emptyDir: 空目录
    addClaim: 添加声明
    addMount: 添加挂载
    addVolume: 添加卷
    selectVolume: 选择卷
    noVolumes: 在 Pod 选项卡中添加卷后，卷将显示在此处
    certificate: 证书
    csi:
      diskName: 磁盘名称
      diskURI: 磁盘 URI
      cachingMode:
        label: 缓存模式
        options:
          none: 无
          readOnly: 只读
          readWrite: 读写
      kind:
        label: 类型
        options:
          dedicated: 专用
          managed: 托管
          shared: 共享
      drivers:
        driver.longhorn.io: Longhorn
      fsType: 文件系统类型
      shareName: 共享名称
      secretName: 密文名称
      volumeID: 卷 ID
      partition: 分区
      pdName: 持久磁盘名称
      storagePolicyID: 存储策略 ID
      storagePolicyName: 存储策略名称
      volumePath: 卷路径
    defaultMode: 默认模式
    driver: 驱动
    hostPath:
      label: 节点上的路径必须是：
      options:
        default: '任意路径：不需要检查目标路径'
        directoryOrCreate: 一个目录，如果该目录不存在，则创建一个目录
        directory: 一个现有的目录
        fileOrCreate: 一个文件，如果该文件不存在，则创建一个文件
        file: 一个现有的文件
        socket: 一个现有的 socket
        charDevice: 一个现有的字符设备
        blockDevice: 一个现有的块设备
    mountPoint: 挂载点
    nodePath: 节点上的路径
    optional:
      label: 选填
      'no': '否'
      'yes': '是'
    path: 路径
    readOnly: 只读
    server: Server IP 地址

    subPath: 卷内子路径
    title: '存储'
    volumeName: 卷名称
    volumePath: 卷路径
    emptyDir:
      medium:
        label: 存储介质
        default: 主机的默认存储
        memory: 内存
      sizeLimit:
        label: 大小限制
        placeholder: "例如：300"
  typeDescriptions:
    apps.daemonset: DaemonSet 在每个符合条件的节点上仅运行一个 Pod。当新节点添加到集群时，DaemonSet 会自动部署新节点。推荐用于全系统或可垂直扩展，且每个节点永远不需要超过一个 pod 的工作负载。
    apps.deployment: Deployment 运行分布在符合条件的节点中的可扩展数量的 Pod 副本。变更会逐步推出，并可回滚到之前的版本。推荐用于无状态和水平可扩展的工作负载。
    apps.statefulset: StatefulSet 管理有状态的应用，并保证创建的 Pod 的顺序和唯一性。推荐用于具有持久化存储或严格身份、法定人数或升级顺序要求的工作负载。
    batch.cronjob: CronJob 创建 Job，然后按照重复调度来运行 Pod。该调度以标准的 Unix cron 格式表示，并使用 Kubernetes Control Plane 的时区（通常是 UTC）。
    batch.job: Job 创建一个或多个 Pod。 Job 通过运行 Pod 直到其成功退出，以可靠执行一次性任务。失败的 Pod 会自动被替换，直到达到指定的完成运行次数。Job 还可以并行运行多个 Pod，或作为批处理工作队列。
    pod: Pod 是你可以在 Kubernetes 中创建和管理的最小可部署计算单元。Pod 是一个或多个容器，具有共享的存储和网络资源以及运行容器的规范。
  upgrading:
    activeDeadlineSeconds:
      label: 判定 Pod 是否活跃的截止时间
      tip: 系统将 Pod 判定为失败，并终止其关联容器前的等待时长
    concurrencyPolicy:
      label: 并发
      options:
        allow: 许多个 CronJob 并发运行
        forbid: 如果当前运行还没有结束，则跳过下一个运行
        replace: 如果当前运行还没有结束，则替换运行
    maxSurge:
      label: 最大 Pod 数量
      tip: 在给定时间内允许超出所需规模的最大 Pod 数量。
    maxUnavailable:
      label: 最大不可用数量
      tip: 在给定时间内的最大不可用 Pod 数量。
    minReadySeconds:
      label: 最短就绪时间
      tip: 在容器没有崩溃的情况下，Pod 变为可用的最短就绪时间。
    podManagementPolicy:
      label: Pod 管理策略
    progressDeadlineSeconds:
      label: 进程截止时间
      tip: 在标志部署失败之前，等待部署到进程的最短时间。
    revisionHistoryLimit:
      label: 修订历史记录限制
      tip: 保留用于回滚的旧 ReplicaSet 的最大数量
    strategies:
      labels:
        delete: "删除：只有在手动删除旧 Pod 时才会创建新 Pod"
        recreate: "重新创建：终止所有 Pod，然后启动新 Pod。"
        rollingUpdate: "滚动升级：创建新 Pod，直到达到最大 Pod 数量（max surge）的值，然后再删除旧 Pod。停用的 pod 数量不能超过设定的最大不可用数量。"
    terminationGracePeriodSeconds:
      label: 终止宽限期
      tip: 终止 Pod 前所需的等待时间
    title: 正在升级
  tabs:
    labels:
      deployment: Deployment
      pod: Pod
      containers: 容器

##############################
# Model Properties
##############################
model:
  account:
    kind:
      admin: 管理员
      agent: Agent
      project: 环境
      registeredAgent: 注册代理
      service: 服务
      user: 用户名
  "catalog.cattle.io.app":
    firstDeployed: 首次部署
    lastDeployed: 最后部署
  authConfig:
    description:
      ldap: LDAP
      saml: SAML
      oauth: OAuth
      oidc: OIDC
    name:
      keycloak: Keycloak (SAML)
      keycloakoidc: Keycloak (OIDC)
    provider:
      system: 系统
      local: 本地
      multiple: Multiple
      activedirectory: Active Directory
      azuread: AzureAD
      github: GitHub
      keycloak: Keycloak
      ldap: LDAP
      openldap: OpenLDAP
      shibboleth: Shibboleth
      ping: Ping Identity
      adfs: ADFS
      okta: Okta
      freeipa: FreeIPA
      googleoauth: Google
      oidc: OIDC
      keycloakoidc: Keycloak

  cluster:
    name: 集群名称
  ingress:
    displayKind: L7 Ingress
  machine:
    role:
      controlPlane: Control Plane
      etcd: ETCD
      worker: Worker
  openldapconfig:
    domain:
      help: 只有此库下的用户能正常登录。
      label: 用户搜索库
      placeholder: "例如：ou=Users,dc=mycompany,dc=com"
    server:
      label: 主机名或 IP 地址
    serviceAccountPassword:
      label: Service Account 密码
    serviceAccountUsername:
      label: Service Account 用户名
  projectMember:
    role:
      member: 成员
      owner: 所有者
      readonly: 只读用户
      restricted: 受限
  service:
    displayKind:
      generic: 服务
      loadBalancer: L4 负载均衡

typeDescription:
  # Map of
  # type: Description to be shown on the top of list view describing the type.
  #       Should fit on one line.
  #       If you link to anything external, it MUST have
  #       target="_blank" rel="noopener noreferrer nofollow"
  branding: "管理员可以修改 Rancher 产品名称、Logo 和配色方案来全局自定义 UI 界面。"
  chart: "除非另有说明，否则所有 Chart 都至少有一个可以安装在具有 Linux 和 Windows 节点的集群上的版本。"
  cis.cattle.io.clusterscanbenchmark: Benchmark 版本是指使用 kube-bench 运行的 Benchmark 名称，以及该 Benchmark 的有效配置参数。
  cis.cattle.io.clusterscanprofile: 配置文件指定 CIS 扫描的配置，也就是要使用的 Benchmark 版本和该 Benchmark 中要跳过的特定测试。
  cis.cattle.io.clusterscan: 扫描是用来根据定义的配置文件，在集群上触发 CIS 扫描的。扫描完成后会创建一份报告。
  cis.cattle.io.clusterscanreport: 报告是集群 CIS 扫描的结果。
  cluster.x-k8s.io.machine: 一个 Machine 封装一个 Kubernetes 节点的配置。你可以使用此视图来查看更新集群后的情况。
  cluster.x-k8s.io.machinedeployment: Machine Deployment 通过使用模板，在一组 Machine Set（与 Deployment 类似）上编排部署。你可以使用此视图来查看更新集群后的情况。
  cluster.x-k8s.io.machineset: Machine Set 确保所需数量的 Machine 始终启动并运行（与 ReplicaSet 类似）。你可以使用此视图来查看更新集群后的情况。
  resources.cattle.io.backup: 创建备份是为了基于 ResourceSet 执行一次性备份或安排重复性备份。
  resources.cattle.io.restore: 创建还原用于根据备份文件触发对集群的还原。
  resources.cattle.io.resourceset: Resource Set 定义要在备份中存储哪些 CRD 和资源。
  monitoring.coreos.com.servicemonitor: Service Monitor 定义了 Prometheus 要抓取的服务组和端点。这是定义指标集合的最常见方法。
  monitoring.coreos.com.podmonitor: PodMonitor 定义了 Prometheus 要抓取指标的 Pod 组。更为常用的是 ServiceMonitor。然而，PodMonitor 让你在 ServiceMonitor 不起作用时，处理任何其他情况。
  monitoring.coreos.com.prometheusrule: PrometheusRule 定义了记录和/或告警规则。记录规则可以预先计算值并保存结果。告警规则允许你定义向 AlertManager 发送通知的条件。
  monitoring.coreos.com.prometheus: Prometheus server 是一个 Prometheus deployment，其抓取的配置和规则由选定的 ServiceMonitor、PodMonitor 和 PrometheusRule 决定。它将其告警信息发送给所有选择的具有定制资源配置的 AlertManager。
  monitoring.coreos.com.alertmanager: Alertmanager 是一个 deployment。其配置由同一命名空间中的密文指定，该密文决定了告警的接收器。
  node: Kubernetes 节点资源展示了承载 Deployment 的虚拟机或物理机。请进入"集群管理"页面管理可用节点的生命周期。
  catalog.cattle.io.clusterrepo: 'Chart 仓库是一个 Helm 仓库或 {vendor} 基于 Git 的应用商店。此处列出了集群中可用的 Chart。'
  catalog.cattle.io.clusterrepo.local: ' Chart 仓库是一个 Helm 仓库或 {vendor} 基于 Git 的应用商店。此处列出了集群中可用的 Chart。集群模板是通过 Helm Chart 部署的。'
  catalog.cattle.io.operation: 最近的操作指的是最近应用于集群的一系列 Helm 操作。
  catalog.cattle.io.app: 已安装的应用指的是通过我们的 Chart 或 Helm CLI 安装的 Helm 3 Chart。
  logging.banzaicloud.io.clusterflow: 集群日志将被收集并投递到选定的 ClusterOutput 中。
  logging.banzaicloud.io.clusteroutput: ClusterOutput 定义了日志可以发送到哪些日志提供程序。只有部署在 Logging operator 所在的命名空间中时，ClusterOutput 才生效。
  logging.banzaicloud.io.flow: Flow 定义了要收集和过滤的日志，以及日志的输出目标。Flow 是一个命名空间资源。换言之，只有部署了该 Flow 的命名空间日志才能被该 Flow 收集。
  logging.banzaicloud.io.output: Output 定义了日志可以发送到哪些日志提供程序。Output 需要与使用它的 Flow 位于相同的命名空间中。
  group.principal: 为组分配全局角色的操作，仅适用于支持组的外部验证提供程序。本地授权不支持组。

typeLabel:
  cis.cattle.io.clusterscan: |-
    {count, plural,
      one { 扫描 }
      other { 扫描 }
    }
  cis.cattle.io.clusterscanprofile: |-
    {count, plural,
      one { 配置文件 }
      other { 配置文件 }
    }
  cis.cattle.io.clusterscanbenchmark: |-
    {count, plural,
      one { Benchmark 版本 }
      other { Benchmark 版本 }
    }
  catalog.cattle.io.operation: |-
    {count, plural,
      one { 最近的操作 }
      other { 最近的操作 }
    }
  catalog.cattle.io.app: |-
    {count, plural,
      one { 已安装的应用 }
      other { 已安装的应用 }
    }
  catalog.cattle.io.clusterrepo: |-
    {count, plural,
      one { Chart 仓库 }
      other { Chart 仓库 }
    }
  catalog.cattle.io.repo: |-
    {count, plural,
      one { 命名空间仓库 }
      other { 命名空间仓库 }
    }
  chartinstallaction: |-
    {count, plural,
      one { 应用 }
      other { 应用 }
    }
  chartupgradeaction: |-
    {count, plural,
      one { 应用 }
      other { 应用 }
    }
  cloudcredential: |-
    {count, plural,
      one { 云凭证}
      other { 云凭证 }
    }
  endpoints: |-
    {count, plural,
      one { 端点 }
      other { 端点 }
    }
  projectroletemplatebinding: |-
    {count, plural,
      one { 项目成员 }
      other { 项目成员 }
    }
  policy.poddisruptionbudget: |-
    {count, plural,
      one { Pod 中断预算 }
      other { Pod 中断预算 }
    }
  limitrange: |-
    {count, plural,
      one { 限制范围 }
      other { 限制范围 }
    }
  resourcequota: |-
    {count, plural,
      one { 资源配额 }
      other { 资源配额 }
    }
  # pruh-mee-thee-eyes https://www.prometheus.io/docs/introduction/faq/#what-is-the-plural-of-prometheus
  monitoring.coreos.com.prometheus: |-
    {count, plural,
      one { Prometheus }
      other { Prometheus }
    }
  helm.cattle.io.projecthelmchart: |-
    {count, plural,
      one { 项目监控 }
      other { 项目监控 }
    }
  monitoring.coreos.com.servicemonitor: |-
    {count, plural,
      one { ServiceMonitor }
      other { ServiceMonitor }
    }
  monitoring.coreos.com.alertmanager: |-
    {count, plural,
      one { Alertmanager }
      other { Alertmanager }
    }
  monitoring.coreos.com.alertmanagerconfig: |-
    {count, plural,
      one { AlertmanagerConfig }
      other { AlertmanagerConfig }
    }
  monitoring.coreos.com.podmonitor: |-
    {count, plural,
      one { PodMonitor }
      other { PodMonitor }
    }
  monitoring.coreos.com.prometheusrule: |-
    {count, plural,
      one { PrometheusRule }
      other { PrometheusRule }
    }
  monitoring.coreos.com.thanosruler: |-
    {count, plural,
      one { Thanos 规则 }
      other { Thanos 规则 }
    }
  monitoring.coreos.com.receiver: |-
    {count, plural,
      one { 接收器 }
      other { 接收器 }
    }
  monitoring.coreos.com.route: |-
    {count, plural,
      one { 路由 }
      other { 路由 }
    }
  'cluster.x-k8s.io.cluster': |-
    {count, plural,
      one { CAPI 集群 }
      other { CAPI 集群 }
    }
  namespace: |-
    {count, plural,
      one { 命名空间 }
      other { 命名空间 }
    }
  node: |-
    {count, plural,
      one { 节点 }
      other { 节点 }
    }
  event: |-
    {count, plural,
      one { 事件 }
      other { 事件 }
    }
  apps.deployment: |-
    {count, plural,
      one { Deployment }
      other { Deployment }
    }
  batch.cronjob: |-
    {count, plural,
      one { CronJob }
      other { CronJob }
    }
  apps.daemonset: |-
    {count, plural,
      one { DaemonSet }
      other { DaemonSet }
    }
  batch.job: |-
    {count, plural,
      one { Job }
      other { Job }
    }
  apps.statefulset: |-
    {count, plural,
      one { StatefulSet }
      other { StatefulSet }
    }
  pod: |-
    {count, plural,
      one { Pod }
      other { Pod }
    }
  autoscaling.horizontalpodautoscaler: |-
    {count, plural,
      one { HorizontalPodAutoscaler }
      other { HorizontalPodAutoscaler }
    }
  networking.k8s.io.ingress: |-
    {count, plural,
      one { Ingress }
      other { Ingress }
    }
  networking.k8s.io.networkpolicy: |-
    {count, plural,
      one { 网络策略 }
      other { 网络策略 }
    }
  service: |-
    {count, plural,
      one { Service }
      other { Service }
    }
  persistentvolume: |-
    {count, plural,
      one { PersistentVolume }
      other { PersistentVolume }
    }
  storage.k8s.io.storageclass: |-
    {count, plural,
      one { StorageClass }
      other { StorageClass }
    }
  configmap: |-
    {count, plural,
      one { ConfigMap }
      other { ConfigMap }
    }
  persistentvolumeclaim: |-
    {count, plural,
      one { 存储卷 }
      other { 存储卷 }
    }
  secret: |-
    {count, plural,
      one { Secret }
      other { Secret }
    }
  apiregistration.k8s.io.apiservice: |-
    {count, plural,
      one { APIService }
      other { APIService }
    }
  apiextensions.k8s.io.customresourcedefinition: |-
    {count, plural,
      one { CustomResourceDefinition }
      other { CustomResourceDefinition }
    }
  flowcontrol.apiserver.k8s.io.flowschema: |-
    {count, plural,
      one { FlowSchema }
      other { FlowSchema }
    }
  flowcontrol.apiserver.k8s.io.prioritylevelconfiguration: |-
    {count, plural,
      one { PriorityLevelConfiguration }
      other { PriorityLevelConfiguration }
    }
  apps.replicaset: |-
    {count, plural,
      one { ReplicaSet }
      other { ReplicaSet }
    }
  coordination.k8s.io.lease: |-
    {count, plural,
      one { Lease }
      other { Lease }
    }
  serviceaccount: |-
    {count, plural,
      one { ServiceAccount }
      other { ServiceAccount }
    }
  discovery.k8s.io.endpointslice: |-
    {count, plural,
      one { EndpointSlice }
      other { EndpointSlice }
    }
  admissionregistration.k8s.io.mutatingwebhookconfiguration: |-
    {count, plural,
      one { MutatingWebhookConfiguration }
      other { MutatingWebhookConfiguration }
    }
  admissionregistration.k8s.io.validatingwebhookconfiguration: |-
    {count, plural,
      one { ValidatingWebhookConfiguration }
      other { ValidatingWebhookConfiguration }
    }
  group.principal: |-
    {count, plural,
      one { 组 }
      other { 组 }
    }
  token: |-
    {count, plural,
      one { API 密钥 }
      other { API 密钥 }
    }
  workload: |-
    {count, plural,
      one { 工作负载 }
      other { 工作负载 }
    }
  fleet.cattle.io.content: |-
    {count, plural,
      one { Content }
      other { Content }
    }
  fleet.cattle.io.bundle: |-
    {count, plural,
      one { Bundle }
      other { Bundle }
    }
  fleet.cattle.io.bundledeployment: |-
    {count, plural,
      one { BundleDeployment }
      other { BundleDeployment }
    }
  k3s.cattle.io.addon: |-
    {count, plural,
      one { 插件 }
      other { 插件 }
    }
  rbac.authorization.k8s.io.clusterrolebinding: |-
    {count, plural,
      one { ClusterRoleBinding }
      other { ClusterRoleBinding }
    }
  rbac.authorization.k8s.io.clusterrole: |-
    {count, plural,
      one { ClusterRole }
      other { ClusterRole }
    }
  rbac.authorization.k8s.io.rolebinding: |-
    {count, plural,
      one { RoleBinding }
      other { RoleBinding }
    }
  rbac.authorization.k8s.io.role: |-
    {count, plural,
      one { Role }
      other { Role }
    }
  scheduling.k8s.io.priorityclass: |-
    {count, plural,
      one { PriorityClass }
      other { PriorityClass }
    }
  storage.k8s.io.csinode: |-
    {count, plural,
      one { CSINode }
      other { CSINode }
    }
  cluster.x-k8s.io.machinedeployment: |-
    {count, plural,
      one { MachineDeployment }
      other { MachineDeployment }
    }
  cluster.x-k8s.io.machineset: |-
    {count, plural,
      one { MachineSet }
      other { MachineSet }
    }
  cluster.x-k8s.io.machine: |-
    {count, plural,
      one { Machine }
      other { Machine }
    }
  ray.io.raycluster: |-
    {count, plural,
      one { 机器学习集群 }
      other { 机器学习集群 }
    }
  nvidia.com.clusterpolicy: |-
    {count, plural,
      one { Nvidia Cluster Policy }
      other { Nvidia Cluster Policies }
    }
  nvidia.com.nvidiadriver: |-
    {count, plural,
      one { Nvidia 驱动 }
      other { Nvidia 驱动 }
    }
  # LLMOS types label
  llmos.ai.volume: |-
    {count, plural,
      one { 卷 }
      other { 卷 }
    }
  management.llmos.ai.setting: |-
    {count, plural,
      one { 设置 }
      other { 设置 }
    }
  management.llmos.ai.managedaddon: |-
    {count, plural,
      one { Addon 组件 }
      other { Addon 组件 }
    }
  management.llmos.ai.user: |-
    {count, plural,
      one { 用户 }
      other { 用户 }
    }
  management.llmos.ai.token: |-
    {count, plural,
      one { API 密钥 }
      other { API 密钥 }
    }
  management.llmos.ai.globalrole: |-
    {count, plural,
      one { Global Role }
      other { Global Roles }
    }
  ml.llmos.ai.modelservice: |-
    {count, plural,
      one { 模型部署 }
      other { 模型部署 }
    }

action:
  clone: 克隆
  disable: 禁用
  download: 下载 YAML
  edit: 编辑配置
  editYaml: 编辑 YAML
  enable: 启用
  openLogs: 查看日志
  refresh: 刷新
  remove: 删除
  view: 查看配置
  viewInApi: 在 API 中查看
  viewYaml: 查看 YAML
  activate: 激活
  deactivate: 停用
  show: 显示
  hide: 隐藏
  copy: 复制
  unassign: '取消分配'
  uninstall: 卸载
  redeploy: 重新部署
  addSidecar: 添加 Sidecar
  rollback: 回滚
  openShell: 执行命令行
  runNow: 立即运行
  suspend: 暂停
  resume: 重新开始

unit:
  sec: 秒
  min: 分钟
  hour: |-
    {count, plural,
      one { 小时 }
      other { 小时 }
    }
  day: |-
    {count, plural,
      one { 天 }
      other { 天 }
    }
workloadPorts:
  addPort: 添加端口或 Service
  remove: 移除
  addHost: 添加主机

podAffinity:
  addLabel: 添加 Pod 选择器

keyValue:
  keyPlaceholder: 例如：foo
  valuePlaceholder: 例如：bar
  protip: '把多行 <em>key=value</em> 或 <em>key: value</em> 键值对复制到各字段中，以便批量输入'

registryMirror:
  header: Mirror
  toolTip: 'Mirror 可用来重定向来自一个仓库的镜像请求，使其来自你指定的端点列表。例如，你可以把 docker.io 指向到只和你的内部仓库通信，而不是通过互联网访问实际的 DockerHub。'
  addLabel: 添加 Mirror
  description: Mirror 定义了私有镜像仓库的名称和端点。将会逐个尝试端点，并使用第一个可工作的端点。
  hostnameLabel: 镜像仓库主机名
  hostnamePlaceholder: 例如：docker.io 或 *
  endpointsLabel: Mirror 端点
  endpointsPlaceholder: 例如：a.registry.com:5000, b.registry.com:5000

registryMirrorRewrite:
  header: 重写
  toolTip: '每个镜像都可以有一组重写。重写可以根据正则表达式来改变镜像的标签。'
  addLabel: 添加重写配置
  keyLabel: 重写模式
  keyPlaceholder: 例如：^rancher/(.*)
  valueLabel: 重写替换
  valuePlaceholder: 例如：mirrorproject/rancher-images/$1

registryConfig:
  header: 仓库验证
  toolTip: '当需要从给定的镜像仓库主机名中拉取镜像时，此信息将用于识别并验证仓库。'
  addLabel: 添加镜像仓库
  description: "为每个镜像仓库主机名和 Mirror 定义 TLS 和凭证配置。"

##############################
### Advanced Settings
##############################

advancedSettings:
  label: 设置
  subtext: 一般用户不需要修改此处的设置。请谨慎操作，不正确的值会破坏 {appName} 的安装。与默认不同的设置会标记为“已修改”。
  show: 显示
  hide: 隐藏
  none: 无
  modified: 已修改
  edit:
    label: 编辑设置
    changeSetting: "修改设置："
    trueOption: "True"
    falseOption: "False"
    value: 值
    useDefault: 使用默认值
    invalidJSON: 无效的 JSON - 请先检查并修改你输入的值，然后再保存。
  descriptions:
    'cacerts': "验证服务器证书所需的 CA 证书。"
    'password-min-length': '定义用户密码所需的最少字符数。'
    'cluster-defaults': '创建新集群时覆盖 RKE 默认值。'
    'engine-install-url': '默认的 Docker 引擎安装 URL（用于大多数主机驱动）。'
    'engine-iso-url': '默认操作系统安装 URL（用于 vSphere 驱动）。'
    'engine-newest-version': '此版本发布时最新支持的 Docker 版本。不在支持范围，但比此版本更新的 Docker 版本，会被标记为未测试。'
    'engine-supported-range': '支持的 Docker 引擎版本的 Semver 范围。不在此范围内的版本将在 UI 中标记为不支持。'
    'ingress-ip-domain': '用于自动生成 Ingress 主机名的通配符 DNS 域。<ingress-name>.<namespace-name>.<ip address of ingress controller> 会被添加到该域。'
    'server-url': '默认 {appName} 安装地址。必须使用 HTTPS。你集群中的所有节点都必须能够访问此地址。'
    'system-default-registry': '用于所有 Rancher System 容器镜像的私有镜像仓库。如果未指定任何值，则使用容器运行时的默认镜像仓库。对于 Docker 和 containerd，默认为 `docker.io`。'
    'ui-index': 'LLMOS Dashboard UI 的 HTML 索引位置。'
    'ui-dashboard-index': '{appName} UI 的 HTML 索引位置。'
    'ui-offline-preferred': '控制 UI 资产是由服务器容器在本地提供，还是从 ui-index 和 ui-dashboard-index 设置中定义的远程 URL 提供。`动态` 选项将在 {appName} 的生产版本中使用本地资产。'
    'ui-pl': '自有品牌公司名称。'
    'telemetry-opt': '遥测报告加入。'
    'auth-user-info-max-age-seconds': '在同步验证提供程序组成员之前，用户验证 Token 的最长存活时间。'
    'auth-user-info-resync-cron': '重新同步验证提供程序组成员的默认 cron 调度。'
    'cluster-template-enforcement': '非管理员只能通过预先批准的 RKE 模板启动集群。'
    'auth-user-session-ttl-minutes': '用户认证会话的自定义 TTL（单位：分钟）。'
    'auth-token-max-ttl-minutes': '所有身份认证 Token 的最大 TTL（单位：分钟）。如果设置为 0，则 Token 永不过期。'
    'kubeconfig-generate-token': '请求 kubeconfig 时自动为用户生成 Token。'
    'kubeconfig-default-token-ttl-minutes': '应用于所有 kubeconfig Token 的 TTL（单位：分钟）。如果设置为 0，则 Token 永不过期。'
    'rke-metadata-config': '配置 RKE 元数据刷新参数。'
    'ui-banners': '分类横幅用于在页眉、页脚或两者中显示自定义的固定横幅。'
    'custom-notifications': 编辑自定义通知
    'ui-consent-banner': '横幅用于在登录期间，向用户展示自定义同意横幅。'
    'ui-default-landing': '用户登录后的默认页面。'
    'brand': 在'/assets/brand'中定义，用于替代主题的文件夹名称
    'hide-local-cluster': 隐藏 local 集群
  editHelp:
    'ui-banners': 此设置使用包含 3 个根参数的 JSON 对象，分别是<code>banner</code>、<code>showHeader</code>和<code>showFooter</code>。<code>banner</code> 是包含 <code>textColor</code>，<code>background</code>和<code>text</code>的对象，其中<code>textColor</code> 和 <code>background</code>的值可以是任何有效的 CSS 颜色值。
  enum:
    'ui-default-landing':
      ember: Cluster Manager
      vue: 集群浏览器
    'telemetry-opt':
      prompt: 提示
      in: 加入遥测
      out: 退出遥测
    'ui-offline-preferred':
      dynamic: 动态
      true: 本地
      false: 远端
    'harv-ui-source':
      auto: '自动'
      bundled: '包'
      external: '外部'
    'harv-log-level':
      info: 信息
      debug: 调试
      trace: 跟踪

banner:
  label: 固定横幅
  settingName: 横幅
  headerBanner: 标题横幅
  footerBanner: 页脚横幅
  loginScreenBanner: 登录屏幕横幅
  text: 文本
  buttonText: 同意按钮文本
  textColor: 文本颜色
  background: 背景颜色
  showHeader: 在页眉中显示横幅
  showFooter: 在页脚中显示横幅
  showConsent: 在登录页面显示同意横幅
  showAsDialog:
    defaultButtonText: 同意
    label: 将登录同意显示为模式对话框
    tooltip: 在登录屏幕上显示一个模式对话框，用户必须先接受该对话框才能登录
  bannerAlignment:
    label: 文字对齐
    leftOption: 左对齐
    centerOption: 居中
    rightOption: 右对齐
  bannerDecoration:
    label: 文字装饰
    bannerBold: 加粗
    bannerItalic: 斜体
    bannerUnderline: 下划线
  bannerFontSize:
    label: '字体大小'
  consent: 同意横幅
  consentFootnote: "提示：使用 \n 进行换行"

branding:
  label: 品牌
  directoryName: 品牌资产目录名称
  logos:
    label: Logo
    tip: '上传 Logo 以替换顶层导航标题中的 Rancher logo。图片的高度应为 21 像素，最大宽度为 200 像素。最大文件大小为 20KB。支持的格式：JPEG、PNG、SVG。'
    lightPreview: 浅色主题预览
    darkPreview: 深色主题预览
    uploadLight: 上传浅色 Logo
    uploadDark: 上传深色 Logo
    useCustom: 使用自定义 Logo
  favicon:
    label: 网站图标
    tip: '上传一个网站图标来替换浏览器选项卡中的 Rancher 图标。最大文件大小为 20KB'
    preview: 网站图标预览
    upload: 上传网站图标
    useCustom: 使用自定义网站图标
  options:
    default: 默认 Rancher 主题
    suse: SUSE 主题
    custom: 自定义主题
  uiPL:
    label: 自有品牌
  color:
    label: 主颜色
    tip: 使用自定义颜色替换整个 UI 中使用的主颜色。
    useCustom: 使用自定义颜色
  linkColor:
    label: 链接颜色
    tip: 使用自定义链接颜色替换整个 UI 中使用的链接颜色。
    useCustom: 使用自定义链接颜色
    example: 链接示例
notifications:
  header: 自定义通知
  menuLabel: '自定义通知'
  loginError:
    header: 登录失败横幅
    showCheckboxLabel: 显示自定义登录失败文本
    messageLabel: 要显示的文本
resourceQuota:
  label: 资源配额
  headers:
    limit: 限制
    namespaceDefaultLimit: 命名空间默认限制
    projectLimit: 项目限制
    projectResourceAvailability: 项目资源可用性
    resourceType: 资源类型
  helpText: 配置整个命名空间可用的资源量。
  helpTextDetail: 整个命名空间可以使用的资源量。
  helpTextHarvester: VM 需要预留额外的内存。
  configMaps: ConfigMaps
  limitsCpu: CPU 限制
  limitsMemory: 内存限制
  persistentVolumeClaims: 持久卷声明
  pods: Pod
  replicationControllers: ReplicationController
  requestsCpu: CPU 预留
  requestsMemory: 内存预留
  requestsStorage: 存储预留
  secrets: 密文
  services: 服务
  servicesLoadBalancers: Service Load Balancer
  servicesNodePorts: Service Node Port
  namespaceLimit:
    label: 命名空间限制
  projectLimit:
    label: 项目限制
    cpuPlaceholder: 例如：2000
    memoryPlaceholder: 例如：2048
    storagePlaceholder: 例如：50
    unitlessPlaceholder: 例如：50
  namespaceDefaultLimit:
    label: 命名空间默认限制
    cpuPlaceholder: 例如：500
    memoryPlaceholder: 例如：1024
    storagePlaceholder: 例如：10
    unitlessPlaceholder: 例如：10
  add:
    label: 添加资源
  tooltip:
    reserved: '其他命名空间：'
    namespace: '此命名空间：'
    available: '可用：'
    max: '总计：'
customLinks:
  displayTitle: 链接
  label: 主页链接
  description: '配置要在主页上显示的链接。你可以配置自定义链接以及显示或隐藏默认链接。'
  restoreDefaults: '恢复默认值'
  addLink: 添加链接
  restoreSuccess: 默认链接已恢复。
  settings:
    default: 默认链接
    custom: 自定义链接
    keyLabel: 显示文本
    valueLabel: URL
    showLabel: 显示
  defaults:
    cnforums:   中文社区
    docs:       Rancher 官方文档
    forums:     论坛
    slack:      Slack
    discord:    Discord
    issues:     提交 GitHub Issue
    getStarted: 开始使用
    commercialSupport: 商业支持



##############################
### Support Page
##############################

support:
  community:
    title: 请联系我们来获得官方技术支持。
    linksTitle: 社区支持
    learnMore: 进一步了解 LLMOS 支持。
    pricing: 联系我们获取价格。
  subscription:
    haveSupport: 已获得支持？
    addSubscription: 添加订阅 ID
    removeSubscription: 移除订阅 ID
    addTitle: 添加 SUSE 订阅 ID
    addLabel: "请输入有效的订阅 ID："
    removeTitle: 是否移除订阅 ID？
    removeBody: "注意：这不会影响你的订阅。"

  llmos:
    title: "好消息--你已得到保障"
    editBrand: 自定义 UI 主题
    access:
      title: 获取支持
      text: 登录获取订阅支持
      action: Customer Support Center
      aws:
        generateConfig: 生成支持配置
        text: '登录获取订阅支持。需要开启新的支持单？下载下面的支持配置文件。'
  promos:
    one:
      title: 24x7 支持
      text: 我们提供严格的服务级别协议和全天候支持选项。
    two:
      title: 问题解决
      text: 我们的开发人员会快速解决问题，因此你可以放心使用我们的产品。
    three:
      title: 故障排除
      text: 无论你使用的 LLMOS、AI工具、还是底层基础架构出现问题，我们都会努力找到问题的根本原因。
    four:
      title: 自由创新
      text: 避免供应商锁定，提供开放、可兼容的开源与商业互操作性方案，让用户更加灵活的实现自主创新。


serverUpgrade:
  title: "{vendor} Server 已更改"
  message: "由于你服务器上运行的 {vendor} 版本已变更，页面需要重新加载。"

volumeClaimTemplate:
  add:
    label: 添加声明模板

manager:
  cloudCredentials:
    label: 云凭证
  drivers:
    label: 驱动
  rkeTemplates:
    label: RKE 模板
  nodeTemplates:
    label: 节点模板

auth:
  roleTemplate: 角色模板
  config:
    label: 认证
vncConsole:
  error:
    message: Web VNC 控制台连接断开

gitPicker:
  github:
    label: GitHub
    tableHeaders:
      choose:
        label: 选择
      sha:
        label: SHA
      author:
        label: 作者
        unknown: 未知
      message:
        label: 消息
      date:
        label: 日期
    username:
      label: 用户名/组织
      inputLabel: 用户名/组织
      tooltip: Git 仓库的用户名/组织
    branch:
      label: 分支
      inputLabel: 分支
      tooltip: 要部署的分支
    repo:
      label: 仓库
      inputLabel: 仓库
      tooltip: 要部署的仓库
    commits:
      label: Commit
      tooltip: 要部署的 Commit
    commit:
      label: Commit
      inputLabel: Commit
    commitMessage:
      label: Commit Message
    errors:
      noAccount: 未找到 GitHub 帐户或组织。请检查你的查询并重试。
      noBranch: 未找到分支。请检查你的查询并重试。
  gitlab:
    label: GitLab
    tableHeaders:
      choose:
        label: 选择
      sha:
        label: SHA
      author:
        label: 作者
        unknown: 未知
      message:
        label: 消息
      date:
        label: 日期
    username:
      label: 用户名/组织
      inputLabel: 用户名/组织
      tooltip: Git 仓库的用户名/组织
    branch:
      label: 分支
      inputLabel: 分支
      tooltip: 要部署的分支
    repo:
      label: 仓库
      inputLabel: 仓库
      tooltip: 要部署的仓库
    commits:
      label: Commit
      tooltip: 要部署的 Commit
    commit:
      label: Commit
      inputLabel: Commit
    commitMessage:
      label: Commit Message
    errors:
      noAccount: 未找到 GitLab 帐户或组织。请检查你的查询并重试。
      noBranch: 未找到分支。请检查你的查询并重试。

networkAttachmentDefinition:
  tabs:
    config: 配置

modelservice:
  model: Name
  modelTooltip: Name or path of the huggingface model
  modelPlaceholder: e.g., facebook/opt-125m
  modelName: Served Model Name
  modelNamePlaceholder: The model name to use in the API
  image: Image
  volumes: Volumes
  hf:
    endpoint: Hugging Face Mirror Endpoint

volume:
  add:
    label: Add Volume
  persistentVolumeClaim:
    name: Volume Name
  volumeClaimTemplates:
    title: Persistent Volume
  subtypes:
    persistentVolumeClaim: Use Existing Volume
    createPVC: Create New Volume
    emptyDir: Empty Dir
    addVolumeClaimTemplate: Create New Volume

scheduling:
  affinity:
    anyNode: Run on any available node
    schedulingRules: Run on node(s) matching scheduling rules
    specificNode: Run on specific node(s)